
//! Autogenerated weights for tellor
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-18, STEPS: `10`, REPEAT: `5`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `parity.localdomain`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/parachain-template-node
// benchmark
// pallet
// --chain
// dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// tellor
// --extrinsic
// *
// --steps
// 10
// --repeat
// 5
// --output
// ../tellor-pallet/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for tellor.
pub trait WeightInfo {
	fn register() -> Weight;
	fn claim_onetime_tip(t: u32, ) -> Weight;
	fn claim_tip(t: u32, ) -> Weight;
	fn fund_feed() -> Weight;
	fn setup_data_feed(q: u32, ) -> Weight;
	fn tip(q: u32, ) -> Weight;
	fn add_staking_rewards() -> Weight;
	fn submit_value(q: u32, v: u32, ) -> Weight;
	fn update_stake_amount(s: u32, l: u32, ) -> Weight;
	fn begin_dispute(d: u32, ) -> Weight;
	fn vote() -> Weight;
	fn vote_on_multiple_disputes(v: u32, ) -> Weight;
	fn send_votes(v: u32, ) -> Weight;
	fn report_stake_deposited() -> Weight;
	fn report_staking_withdraw_request() -> Weight;
	fn report_stake_withdrawn() -> Weight;
	fn report_slash() -> Weight;
	fn report_vote_tallied() -> Weight;
	fn report_vote_executed(r: u32, ) -> Weight;
	fn on_initialize(s: u32, l: u32, v: u32, ) -> Weight;
}

/// Weights for tellor using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	/// Proof Skipped: ParachainSystem HostConfiguration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	/// Proof Skipped: ParachainSystem PendingUpwardMessages (max_values: Some(1), max_size: None, mode: Measured)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `38`
		//  Estimated: `4_535`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(38_000_000, 4_535)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Tellor TipCount (r:1 w:0)
	/// Proof: Tellor TipCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor Reports (r:101 w:0)
	/// Proof: Tellor Reports (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	/// Storage: Tellor Tips (r:100 w:100)
	/// Proof: Tellor Tips (max_values: None, max_size: Some(92), added: 2567, mode: MaxEncodedLen)
	/// Storage: System Account (r:4 w:4)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:0)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:0)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor LastReportedTimestamp (r:1 w:0)
	/// Proof: Tellor LastReportedTimestamp (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Tellor QueryIdsWithFunding (r:0 w:1)
	/// Proof: Tellor QueryIdsWithFunding (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// The range of component `t` is `[1, 100]`.
	fn claim_onetime_tip(t: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `976 + t * (147 ±0)`
		//  Estimated: `31_975 + t * (5148 ±0)`
		// Minimum execution time: 128_000_000 picoseconds.
		Weight::from_parts(37_022_038, 31_975)
			// Standard Error: 325_969
			.saturating_add(Weight::from_parts(24_202_203, 0).saturating_mul(t.into()))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(t.into())))
			.saturating_add(Weight::from_parts(0, 5148).saturating_mul(t.into()))
	}
	/// Storage: Tellor DataFeeds (r:1 w:1)
	/// Proof: Tellor DataFeeds (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor Reports (r:100 w:0)
	/// Proof: Tellor Reports (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	/// Storage: Tellor DataFeedRewardClaimed (r:100 w:100)
	/// Proof: Tellor DataFeedRewardClaimed (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:101 w:0)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// Storage: System Account (r:4 w:4)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:0)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:0)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor FeedsWithFunding (r:0 w:1)
	/// Proof: Tellor FeedsWithFunding (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// The range of component `t` is `[1, 100]`.
	fn claim_tip(t: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1_167 + t * (144 ±0)`
		//  Estimated: `29_770 + t * (7933 ±0)`
		// Minimum execution time: 131_000_000 picoseconds.
		Weight::from_parts(109_860_789, 29_770)
			// Standard Error: 191_554
			.saturating_add(Weight::from_parts(24_648_301, 0).saturating_mul(t.into()))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(t.into())))
			.saturating_add(Weight::from_parts(0, 7933).saturating_mul(t.into()))
	}
	/// Storage: Tellor DataFeeds (r:1 w:1)
	/// Proof: Tellor DataFeeds (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor UserTipsTotal (r:1 w:1)
	/// Proof: Tellor UserTipsTotal (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Tellor FeedsWithFunding (r:0 w:1)
	/// Proof: Tellor FeedsWithFunding (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	fn fund_feed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `615`
		//  Estimated: `13_328`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(39_000_000, 13_328)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Tellor DataFeeds (r:1 w:1)
	/// Proof: Tellor DataFeeds (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor UserTipsTotal (r:1 w:1)
	/// Proof: Tellor UserTipsTotal (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Tellor FeedsWithFunding (r:0 w:1)
	/// Proof: Tellor FeedsWithFunding (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: Tellor QueryData (r:0 w:1)
	/// Proof: Tellor QueryData (max_values: None, max_size: Some(1058), added: 3533, mode: MaxEncodedLen)
	/// Storage: Tellor QueryIdFromDataFeedId (r:0 w:1)
	/// Proof: Tellor QueryIdFromDataFeedId (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// The range of component `q` is `[1, 1024]`.
	fn setup_data_feed(q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `569`
		//  Estimated: `13_328`
		// Minimum execution time: 56_000_000 picoseconds.
		Weight::from_parts(57_106_449, 13_328)
			// Standard Error: 892
			.saturating_add(Weight::from_parts(3_111, 0).saturating_mul(q.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Tellor TipCount (r:1 w:1)
	/// Proof: Tellor TipCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor LastReportedTimestamp (r:1 w:0)
	/// Proof: Tellor LastReportedTimestamp (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: System Account (r:3 w:3)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor UserTipsTotal (r:1 w:1)
	/// Proof: Tellor UserTipsTotal (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Tellor QueryIdsWithFunding (r:0 w:1)
	/// Proof: Tellor QueryIdsWithFunding (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: Tellor Tips (r:0 w:1)
	/// Proof: Tellor Tips (max_values: None, max_size: Some(92), added: 2567, mode: MaxEncodedLen)
	/// Storage: Tellor QueryData (r:0 w:1)
	/// Proof: Tellor QueryData (max_values: None, max_size: Some(1058), added: 3533, mode: MaxEncodedLen)
	/// The range of component `q` is `[1, 1024]`.
	fn tip(_q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `289`
		//  Estimated: `20_827`
		// Minimum execution time: 73_000_000 picoseconds.
		Weight::from_parts(80_280_190, 20_827)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: System Account (r:3 w:3)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:0)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:0)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:0 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn add_staking_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `289`
		//  Estimated: `16_304`
		// Minimum execution time: 63_000_000 picoseconds.
		Weight::from_parts(64_000_000, 16_304)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Tellor ReportedTimestampCount (r:1 w:1)
	/// Proof: Tellor ReportedTimestampCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor Reports (r:1 w:1)
	/// Proof: Tellor Reports (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	/// Storage: Tellor LastReportedTimestamp (r:1 w:1)
	/// Proof: Tellor LastReportedTimestamp (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Tellor StakerReportsSubmittedByQueryId (r:1 w:1)
	/// Proof: Tellor StakerReportsSubmittedByQueryId (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:0 w:1)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastNewValue (r:0 w:1)
	/// Proof: Tellor TimeOfLastNewValue (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:0 w:1)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// The range of component `q` is `[1, 1024]`.
	/// The range of component `v` is `[1, 256]`.
	fn submit_value(q: u32, v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `419`
		//  Estimated: `20_782`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(39_430_370, 20_782)
			// Standard Error: 706
			.saturating_add(Weight::from_parts(1_877, 0).saturating_mul(q.into()))
			// Standard Error: 2_833
			.saturating_add(Weight::from_parts(3_439, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor LastReportedTimestamp (r:2 w:0)
	/// Proof: Tellor LastReportedTimestamp (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:4 w:0)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: Tellor Reports (r:2 w:0)
	/// Proof: Tellor Reports (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:2 w:0)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:1)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeFee (r:1 w:1)
	/// Proof: Tellor DisputeFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 12]`.
	/// The range of component `l` is `[2, 12]`.
	fn update_stake_amount(s: u32, l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `145 + s * (297 ±0) + l * (298 ±0)`
		//  Estimated: `34_381`
		// Minimum execution time: 402_000_000 picoseconds.
		Weight::from_parts(416_000_000, 34_381)
			// Standard Error: 6_364_128
			.saturating_add(Weight::from_parts(15_144_496, 0).saturating_mul(s.into()))
			// Standard Error: 6_364_128
			.saturating_add(Weight::from_parts(12_653_176, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:0)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Tellor Reports (r:99 w:99)
	/// Proof: Tellor Reports (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Tellor VoteRounds (r:1 w:1)
	/// Proof: Tellor VoteRounds (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeFee (r:1 w:0)
	/// Proof: Tellor DisputeFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor OpenDisputesOnId (r:1 w:1)
	/// Proof: Tellor OpenDisputesOnId (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:1 w:1)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:100 w:0)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: Tellor LastReportedTimestamp (r:1 w:1)
	/// Proof: Tellor LastReportedTimestamp (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Tellor VoteCount (r:1 w:1)
	/// Proof: Tellor VoteCount (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	/// Proof Skipped: ParachainSystem HostConfiguration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	/// Proof Skipped: ParachainSystem PendingUpwardMessages (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Tellor VoteInfo (r:0 w:1)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: Tellor PendingVotes (r:0 w:1)
	/// Proof: Tellor PendingVotes (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeIdsByReporter (r:0 w:1)
	/// Proof: Tellor DisputeIdsByReporter (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeInfo (r:0 w:1)
	/// Proof: Tellor DisputeInfo (max_values: None, max_size: Some(394), added: 2869, mode: MaxEncodedLen)
	/// The range of component `d` is `[1, 100]`.
	fn begin_dispute(d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1_089 + d * (539 ±0)`
		//  Estimated: `41_777 + d * (6114 ±7)`
		// Minimum execution time: 125_000_000 picoseconds.
		Weight::from_parts(114_466_115, 41_777)
			// Standard Error: 74_788
			.saturating_add(Weight::from_parts(8_339_944, 0).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(14_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(d.into())))
			.saturating_add(T::DbWeight::get().writes(11_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 6114).saturating_mul(d.into()))
	}
	/// Storage: Tellor DisputeInfo (r:1 w:0)
	/// Proof: Tellor DisputeInfo (max_values: None, max_size: Some(394), added: 2869, mode: MaxEncodedLen)
	/// Storage: Tellor VoteRounds (r:1 w:0)
	/// Proof: Tellor VoteRounds (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:1 w:1)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: Tellor Votes (r:1 w:1)
	/// Proof: Tellor Votes (max_values: None, max_size: Some(90), added: 2565, mode: MaxEncodedLen)
	/// Storage: Tellor StakerDetails (r:1 w:0)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Tellor UserTipsTotal (r:1 w:0)
	/// Proof: Tellor UserTipsTotal (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Tellor VoteTallyByAddress (r:1 w:1)
	/// Proof: Tellor VoteTallyByAddress (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1_094`
		//  Estimated: `25_311`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(39_000_000, 25_311)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Tellor DisputeInfo (r:10 w:0)
	/// Proof: Tellor DisputeInfo (max_values: None, max_size: Some(394), added: 2869, mode: MaxEncodedLen)
	/// Storage: Tellor VoteRounds (r:10 w:0)
	/// Proof: Tellor VoteRounds (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:10 w:10)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: Tellor Votes (r:10 w:10)
	/// Proof: Tellor Votes (max_values: None, max_size: Some(90), added: 2565, mode: MaxEncodedLen)
	/// Storage: Tellor StakerDetails (r:1 w:0)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Tellor UserTipsTotal (r:1 w:0)
	/// Proof: Tellor UserTipsTotal (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Tellor VoteTallyByAddress (r:1 w:1)
	/// Proof: Tellor VoteTallyByAddress (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// The range of component `v` is `[1, 10]`.
	fn vote_on_multiple_disputes(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `749 + v * (384 ±0)`
		//  Estimated: `14_652 + v * (10659 ±0)`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(15_044_444, 14_652)
			// Standard Error: 194_487
			.saturating_add(Weight::from_parts(26_070_707, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 10659).saturating_mul(v.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor PendingVotes (r:256 w:245)
	/// Proof: Tellor PendingVotes (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:245 w:245)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	/// Proof Skipped: ParachainSystem HostConfiguration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	/// Proof Skipped: ParachainSystem PendingUpwardMessages (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `v` is `[1, 255]`.
	fn send_votes(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + v * (713 ±0)`
		//  Estimated: `59_961 + v * (6221 ±44)`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_000_000, 59_961)
			// Standard Error: 201_823
			.saturating_add(Weight::from_parts(31_440_384, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 6221).saturating_mul(v.into()))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor VoteCount (r:1 w:0)
	/// Proof: Tellor VoteCount (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:1)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:1)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakers (r:1 w:1)
	/// Proof: Tellor TotalStakers (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn report_stake_deposited() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `410`
		//  Estimated: `20_748`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(37_000_000, 20_748)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor VoteCount (r:1 w:0)
	/// Proof: Tellor VoteCount (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:1)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:1)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakers (r:1 w:1)
	/// Proof: Tellor TotalStakers (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor ToWithdraw (r:1 w:1)
	/// Proof: Tellor ToWithdraw (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	/// Proof Skipped: ParachainSystem HostConfiguration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	/// Proof Skipped: ParachainSystem PendingUpwardMessages (max_values: Some(1), max_size: None, mode: Measured)
	fn report_staking_withdraw_request() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `448`
		//  Estimated: `27_620`
		// Minimum execution time: 65_000_000 picoseconds.
		Weight::from_parts(66_000_000, 27_620)
			.saturating_add(T::DbWeight::get().reads(15_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor ToWithdraw (r:1 w:1)
	/// Proof: Tellor ToWithdraw (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn report_stake_withdrawn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `468`
		//  Estimated: `6_656`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(20_000_000, 6_656)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:1)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor VoteCount (r:1 w:0)
	/// Proof: Tellor VoteCount (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor VoteTallyByAddress (r:1 w:0)
	/// Proof: Tellor VoteTallyByAddress (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:1)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakers (r:1 w:1)
	/// Proof: Tellor TotalStakers (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor ToWithdraw (r:1 w:1)
	/// Proof: Tellor ToWithdraw (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn report_slash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `798`
		//  Estimated: `25_782`
		// Minimum execution time: 49_000_000 picoseconds.
		Weight::from_parts(49_000_000, 25_782)
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Tellor VoteRounds (r:1 w:0)
	/// Proof: Tellor VoteRounds (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:1 w:1)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeInfo (r:1 w:0)
	/// Proof: Tellor DisputeInfo (max_values: None, max_size: Some(394), added: 2869, mode: MaxEncodedLen)
	fn report_vote_tallied() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1_005`
		//  Estimated: `12_557`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(27_000_000, 12_557)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Tellor DisputeInfo (r:1 w:0)
	/// Proof: Tellor DisputeInfo (max_values: None, max_size: Some(394), added: 2869, mode: MaxEncodedLen)
	/// Storage: Tellor VoteRounds (r:1 w:0)
	/// Proof: Tellor VoteRounds (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:20 w:1)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor OpenDisputesOnId (r:1 w:1)
	/// Proof: Tellor OpenDisputesOnId (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: System Account (r:21 w:21)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 20]`.
	fn report_vote_executed(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `919 + r * (348 ±0)`
		//  Estimated: `16_934 + r * (5320 ±0)`
		// Minimum execution time: 55_000_000 picoseconds.
		Weight::from_parts(39_706_888, 16_934)
			// Standard Error: 298_893
			.saturating_add(Weight::from_parts(20_157_733, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 5320).saturating_mul(r.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor LastStakeAmountUpdate (r:1 w:1)
	/// Proof: Tellor LastStakeAmountUpdate (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor LastReportedTimestamp (r:2 w:0)
	/// Proof: Tellor LastReportedTimestamp (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:4 w:0)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: Tellor Reports (r:2 w:0)
	/// Proof: Tellor Reports (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:2 w:0)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:1)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeFee (r:1 w:1)
	/// Proof: Tellor DisputeFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor PendingVotes (r:4 w:3)
	/// Proof: Tellor PendingVotes (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:3 w:3)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	/// Proof Skipped: ParachainSystem HostConfiguration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	/// Proof Skipped: ParachainSystem PendingUpwardMessages (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `s` is `[2, 12]`.
	/// The range of component `l` is `[2, 12]`.
	/// The range of component `v` is `[1, 3]`.
	fn on_initialize(s: u32, l: u32, v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `255 + s * (380 ±0) + l * (284 ±0) + v * (717 ±0)`
		//  Estimated: `44_947 + s * (796 ±5) + l * (558 ±5) + v * (6743 ±24)`
		// Minimum execution time: 446_000_000 picoseconds.
		Weight::from_parts(149_763_176, 44_947)
			// Standard Error: 8_818_330
			.saturating_add(Weight::from_parts(12_164_406, 0).saturating_mul(s.into()))
			// Standard Error: 8_818_330
			.saturating_add(Weight::from_parts(23_988_191, 0).saturating_mul(l.into()))
			// Standard Error: 37_158_574
			.saturating_add(Weight::from_parts(47_426_153, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 796).saturating_mul(s.into()))
			.saturating_add(Weight::from_parts(0, 558).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 6743).saturating_mul(v.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	/// Proof Skipped: ParachainSystem HostConfiguration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	/// Proof Skipped: ParachainSystem PendingUpwardMessages (max_values: Some(1), max_size: None, mode: Measured)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `38`
		//  Estimated: `4_535`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(38_000_000, 4_535)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Tellor TipCount (r:1 w:0)
	/// Proof: Tellor TipCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor Reports (r:101 w:0)
	/// Proof: Tellor Reports (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	/// Storage: Tellor Tips (r:100 w:100)
	/// Proof: Tellor Tips (max_values: None, max_size: Some(92), added: 2567, mode: MaxEncodedLen)
	/// Storage: System Account (r:4 w:4)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:0)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:0)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor LastReportedTimestamp (r:1 w:0)
	/// Proof: Tellor LastReportedTimestamp (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Tellor QueryIdsWithFunding (r:0 w:1)
	/// Proof: Tellor QueryIdsWithFunding (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// The range of component `t` is `[1, 100]`.
	fn claim_onetime_tip(t: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `976 + t * (147 ±0)`
		//  Estimated: `31_975 + t * (5148 ±0)`
		// Minimum execution time: 128_000_000 picoseconds.
		Weight::from_parts(37_022_038, 31_975)
			// Standard Error: 325_969
			.saturating_add(Weight::from_parts(24_202_203, 0).saturating_mul(t.into()))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(t.into())))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(t.into())))
			.saturating_add(Weight::from_parts(0, 5148).saturating_mul(t.into()))
	}
	/// Storage: Tellor DataFeeds (r:1 w:1)
	/// Proof: Tellor DataFeeds (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor Reports (r:100 w:0)
	/// Proof: Tellor Reports (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	/// Storage: Tellor DataFeedRewardClaimed (r:100 w:100)
	/// Proof: Tellor DataFeedRewardClaimed (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:101 w:0)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// Storage: System Account (r:4 w:4)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:0)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:0)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor FeedsWithFunding (r:0 w:1)
	/// Proof: Tellor FeedsWithFunding (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// The range of component `t` is `[1, 100]`.
	fn claim_tip(t: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1_167 + t * (144 ±0)`
		//  Estimated: `29_770 + t * (7933 ±0)`
		// Minimum execution time: 131_000_000 picoseconds.
		Weight::from_parts(109_860_789, 29_770)
			// Standard Error: 191_554
			.saturating_add(Weight::from_parts(24_648_301, 0).saturating_mul(t.into()))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(t.into())))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(t.into())))
			.saturating_add(Weight::from_parts(0, 7933).saturating_mul(t.into()))
	}
	/// Storage: Tellor DataFeeds (r:1 w:1)
	/// Proof: Tellor DataFeeds (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor UserTipsTotal (r:1 w:1)
	/// Proof: Tellor UserTipsTotal (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Tellor FeedsWithFunding (r:0 w:1)
	/// Proof: Tellor FeedsWithFunding (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	fn fund_feed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `615`
		//  Estimated: `13_328`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(39_000_000, 13_328)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Tellor DataFeeds (r:1 w:1)
	/// Proof: Tellor DataFeeds (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor UserTipsTotal (r:1 w:1)
	/// Proof: Tellor UserTipsTotal (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Tellor FeedsWithFunding (r:0 w:1)
	/// Proof: Tellor FeedsWithFunding (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: Tellor QueryData (r:0 w:1)
	/// Proof: Tellor QueryData (max_values: None, max_size: Some(1058), added: 3533, mode: MaxEncodedLen)
	/// Storage: Tellor QueryIdFromDataFeedId (r:0 w:1)
	/// Proof: Tellor QueryIdFromDataFeedId (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// The range of component `q` is `[1, 1024]`.
	fn setup_data_feed(q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `569`
		//  Estimated: `13_328`
		// Minimum execution time: 56_000_000 picoseconds.
		Weight::from_parts(57_106_449, 13_328)
			// Standard Error: 892
			.saturating_add(Weight::from_parts(3_111, 0).saturating_mul(q.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Tellor TipCount (r:1 w:1)
	/// Proof: Tellor TipCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor LastReportedTimestamp (r:1 w:0)
	/// Proof: Tellor LastReportedTimestamp (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: System Account (r:3 w:3)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor UserTipsTotal (r:1 w:1)
	/// Proof: Tellor UserTipsTotal (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Tellor QueryIdsWithFunding (r:0 w:1)
	/// Proof: Tellor QueryIdsWithFunding (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: Tellor Tips (r:0 w:1)
	/// Proof: Tellor Tips (max_values: None, max_size: Some(92), added: 2567, mode: MaxEncodedLen)
	/// Storage: Tellor QueryData (r:0 w:1)
	/// Proof: Tellor QueryData (max_values: None, max_size: Some(1058), added: 3533, mode: MaxEncodedLen)
	/// The range of component `q` is `[1, 1024]`.
	fn tip(_q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `289`
		//  Estimated: `20_827`
		// Minimum execution time: 73_000_000 picoseconds.
		Weight::from_parts(80_280_190, 20_827)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	/// Storage: System Account (r:3 w:3)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:0)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:0)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:0 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn add_staking_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `289`
		//  Estimated: `16_304`
		// Minimum execution time: 63_000_000 picoseconds.
		Weight::from_parts(64_000_000, 16_304)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Tellor ReportedTimestampCount (r:1 w:1)
	/// Proof: Tellor ReportedTimestampCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor Reports (r:1 w:1)
	/// Proof: Tellor Reports (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	/// Storage: Tellor LastReportedTimestamp (r:1 w:1)
	/// Proof: Tellor LastReportedTimestamp (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Tellor StakerReportsSubmittedByQueryId (r:1 w:1)
	/// Proof: Tellor StakerReportsSubmittedByQueryId (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:0 w:1)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastNewValue (r:0 w:1)
	/// Proof: Tellor TimeOfLastNewValue (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:0 w:1)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// The range of component `q` is `[1, 1024]`.
	/// The range of component `v` is `[1, 256]`.
	fn submit_value(q: u32, v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `419`
		//  Estimated: `20_782`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(39_430_370, 20_782)
			// Standard Error: 706
			.saturating_add(Weight::from_parts(1_877, 0).saturating_mul(q.into()))
			// Standard Error: 2_833
			.saturating_add(Weight::from_parts(3_439, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor LastReportedTimestamp (r:2 w:0)
	/// Proof: Tellor LastReportedTimestamp (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:4 w:0)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: Tellor Reports (r:2 w:0)
	/// Proof: Tellor Reports (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:2 w:0)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:1)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeFee (r:1 w:1)
	/// Proof: Tellor DisputeFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 12]`.
	/// The range of component `l` is `[2, 12]`.
	fn update_stake_amount(s: u32, l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `145 + s * (297 ±0) + l * (298 ±0)`
		//  Estimated: `34_381`
		// Minimum execution time: 402_000_000 picoseconds.
		Weight::from_parts(416_000_000, 34_381)
			// Standard Error: 6_364_128
			.saturating_add(Weight::from_parts(15_144_496, 0).saturating_mul(s.into()))
			// Standard Error: 6_364_128
			.saturating_add(Weight::from_parts(12_653_176, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:0)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Tellor Reports (r:99 w:99)
	/// Proof: Tellor Reports (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Tellor VoteRounds (r:1 w:1)
	/// Proof: Tellor VoteRounds (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeFee (r:1 w:0)
	/// Proof: Tellor DisputeFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor OpenDisputesOnId (r:1 w:1)
	/// Proof: Tellor OpenDisputesOnId (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:1 w:1)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:100 w:0)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: Tellor LastReportedTimestamp (r:1 w:1)
	/// Proof: Tellor LastReportedTimestamp (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Tellor VoteCount (r:1 w:1)
	/// Proof: Tellor VoteCount (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	/// Proof Skipped: ParachainSystem HostConfiguration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	/// Proof Skipped: ParachainSystem PendingUpwardMessages (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Tellor VoteInfo (r:0 w:1)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: Tellor PendingVotes (r:0 w:1)
	/// Proof: Tellor PendingVotes (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeIdsByReporter (r:0 w:1)
	/// Proof: Tellor DisputeIdsByReporter (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeInfo (r:0 w:1)
	/// Proof: Tellor DisputeInfo (max_values: None, max_size: Some(394), added: 2869, mode: MaxEncodedLen)
	/// The range of component `d` is `[1, 100]`.
	fn begin_dispute(d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1_089 + d * (539 ±0)`
		//  Estimated: `41_777 + d * (6114 ±7)`
		// Minimum execution time: 125_000_000 picoseconds.
		Weight::from_parts(114_466_115, 41_777)
			// Standard Error: 74_788
			.saturating_add(Weight::from_parts(8_339_944, 0).saturating_mul(d.into()))
			.saturating_add(RocksDbWeight::get().reads(14_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(d.into())))
			.saturating_add(RocksDbWeight::get().writes(11_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 6114).saturating_mul(d.into()))
	}
	/// Storage: Tellor DisputeInfo (r:1 w:0)
	/// Proof: Tellor DisputeInfo (max_values: None, max_size: Some(394), added: 2869, mode: MaxEncodedLen)
	/// Storage: Tellor VoteRounds (r:1 w:0)
	/// Proof: Tellor VoteRounds (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:1 w:1)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: Tellor Votes (r:1 w:1)
	/// Proof: Tellor Votes (max_values: None, max_size: Some(90), added: 2565, mode: MaxEncodedLen)
	/// Storage: Tellor StakerDetails (r:1 w:0)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Tellor UserTipsTotal (r:1 w:0)
	/// Proof: Tellor UserTipsTotal (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Tellor VoteTallyByAddress (r:1 w:1)
	/// Proof: Tellor VoteTallyByAddress (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1_094`
		//  Estimated: `25_311`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(39_000_000, 25_311)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Tellor DisputeInfo (r:10 w:0)
	/// Proof: Tellor DisputeInfo (max_values: None, max_size: Some(394), added: 2869, mode: MaxEncodedLen)
	/// Storage: Tellor VoteRounds (r:10 w:0)
	/// Proof: Tellor VoteRounds (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:10 w:10)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: Tellor Votes (r:10 w:10)
	/// Proof: Tellor Votes (max_values: None, max_size: Some(90), added: 2565, mode: MaxEncodedLen)
	/// Storage: Tellor StakerDetails (r:1 w:0)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Tellor UserTipsTotal (r:1 w:0)
	/// Proof: Tellor UserTipsTotal (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Tellor VoteTallyByAddress (r:1 w:1)
	/// Proof: Tellor VoteTallyByAddress (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// The range of component `v` is `[1, 10]`.
	fn vote_on_multiple_disputes(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `749 + v * (384 ±0)`
		//  Estimated: `14_652 + v * (10659 ±0)`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(15_044_444, 14_652)
			// Standard Error: 194_487
			.saturating_add(Weight::from_parts(26_070_707, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(v.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 10659).saturating_mul(v.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor PendingVotes (r:256 w:245)
	/// Proof: Tellor PendingVotes (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:245 w:245)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	/// Proof Skipped: ParachainSystem HostConfiguration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	/// Proof Skipped: ParachainSystem PendingUpwardMessages (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `v` is `[1, 255]`.
	fn send_votes(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + v * (713 ±0)`
		//  Estimated: `59_961 + v * (6221 ±44)`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_000_000, 59_961)
			// Standard Error: 201_823
			.saturating_add(Weight::from_parts(31_440_384, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(v.into())))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 6221).saturating_mul(v.into()))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor VoteCount (r:1 w:0)
	/// Proof: Tellor VoteCount (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:1)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:1)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakers (r:1 w:1)
	/// Proof: Tellor TotalStakers (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn report_stake_deposited() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `410`
		//  Estimated: `20_748`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(37_000_000, 20_748)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor VoteCount (r:1 w:0)
	/// Proof: Tellor VoteCount (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:1)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:1)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakers (r:1 w:1)
	/// Proof: Tellor TotalStakers (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor ToWithdraw (r:1 w:1)
	/// Proof: Tellor ToWithdraw (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	/// Proof Skipped: ParachainSystem HostConfiguration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	/// Proof Skipped: ParachainSystem PendingUpwardMessages (max_values: Some(1), max_size: None, mode: Measured)
	fn report_staking_withdraw_request() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `448`
		//  Estimated: `27_620`
		// Minimum execution time: 65_000_000 picoseconds.
		Weight::from_parts(66_000_000, 27_620)
			.saturating_add(RocksDbWeight::get().reads(15_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor ToWithdraw (r:1 w:1)
	/// Proof: Tellor ToWithdraw (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn report_stake_withdrawn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `468`
		//  Estimated: `6_656`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(20_000_000, 6_656)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:1)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor VoteCount (r:1 w:0)
	/// Proof: Tellor VoteCount (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor VoteTallyByAddress (r:1 w:0)
	/// Proof: Tellor VoteTallyByAddress (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:1)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakers (r:1 w:1)
	/// Proof: Tellor TotalStakers (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor ToWithdraw (r:1 w:1)
	/// Proof: Tellor ToWithdraw (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn report_slash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `798`
		//  Estimated: `25_782`
		// Minimum execution time: 49_000_000 picoseconds.
		Weight::from_parts(49_000_000, 25_782)
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Tellor VoteRounds (r:1 w:0)
	/// Proof: Tellor VoteRounds (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:1 w:1)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeInfo (r:1 w:0)
	/// Proof: Tellor DisputeInfo (max_values: None, max_size: Some(394), added: 2869, mode: MaxEncodedLen)
	fn report_vote_tallied() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1_005`
		//  Estimated: `12_557`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(27_000_000, 12_557)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Tellor DisputeInfo (r:1 w:0)
	/// Proof: Tellor DisputeInfo (max_values: None, max_size: Some(394), added: 2869, mode: MaxEncodedLen)
	/// Storage: Tellor VoteRounds (r:1 w:0)
	/// Proof: Tellor VoteRounds (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:20 w:1)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor OpenDisputesOnId (r:1 w:1)
	/// Proof: Tellor OpenDisputesOnId (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: System Account (r:21 w:21)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 20]`.
	fn report_vote_executed(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `919 + r * (348 ±0)`
		//  Estimated: `16_934 + r * (5320 ±0)`
		// Minimum execution time: 55_000_000 picoseconds.
		Weight::from_parts(39_706_888, 16_934)
			// Standard Error: 298_893
			.saturating_add(Weight::from_parts(20_157_733, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 5320).saturating_mul(r.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor LastStakeAmountUpdate (r:1 w:1)
	/// Proof: Tellor LastStakeAmountUpdate (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor LastReportedTimestamp (r:2 w:0)
	/// Proof: Tellor LastReportedTimestamp (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:4 w:0)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: Tellor Reports (r:2 w:0)
	/// Proof: Tellor Reports (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:2 w:0)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:1)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeFee (r:1 w:1)
	/// Proof: Tellor DisputeFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor PendingVotes (r:4 w:3)
	/// Proof: Tellor PendingVotes (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:3 w:3)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	/// Proof Skipped: ParachainSystem HostConfiguration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	/// Proof Skipped: ParachainSystem PendingUpwardMessages (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `s` is `[2, 12]`.
	/// The range of component `l` is `[2, 12]`.
	/// The range of component `v` is `[1, 3]`.
	fn on_initialize(s: u32, l: u32, v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `255 + s * (380 ±0) + l * (284 ±0) + v * (717 ±0)`
		//  Estimated: `44_947 + s * (796 ±5) + l * (558 ±5) + v * (6743 ±24)`
		// Minimum execution time: 446_000_000 picoseconds.
		Weight::from_parts(149_763_176, 44_947)
			// Standard Error: 8_818_330
			.saturating_add(Weight::from_parts(12_164_406, 0).saturating_mul(s.into()))
			// Standard Error: 8_818_330
			.saturating_add(Weight::from_parts(23_988_191, 0).saturating_mul(l.into()))
			// Standard Error: 37_158_574
			.saturating_add(Weight::from_parts(47_426_153, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(18_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(v.into())))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 796).saturating_mul(s.into()))
			.saturating_add(Weight::from_parts(0, 558).saturating_mul(l.into()))
			.saturating_add(Weight::from_parts(0, 6743).saturating_mul(v.into()))
	}
}
