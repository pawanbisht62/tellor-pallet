
//! Autogenerated weights for tellor
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-08, STEPS: `5`, REPEAT: `5`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: ``
//! HOSTNAME: `Pawans-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/parachain-template-node
// benchmark
// pallet
// --chain
// dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// tellor
// --extrinsic
// *
// --steps
// 5
// --repeat
// 5
// --output
// ./weights.rs
// --template=./.maintain/frame-weight-template.hbs
// --heap-pages=4096

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for tellor.
pub trait WeightInfo {
	fn register() -> Weight;
	fn report_stake_deposited() -> Weight;
	fn report_staking_withdraw_request() -> Weight;
	fn report_stake_withdrawn() -> Weight;
	fn setup_data_feed(q: u32, ) -> Weight;
	fn fund_feed() -> Weight;
	fn submit_value(q: u32, v: u32, ) -> Weight;
	fn add_staking_rewards() -> Weight;
	fn update_stake_amount() -> Weight;
	fn tip(s: u32, q: u32, ) -> Weight;
	fn claim_onetime_tip(s: u32, t: u32, ) -> Weight;
	fn claim_tip(s: u32, ) -> Weight;
	fn begin_dispute() -> Weight;
	fn vote() -> Weight;
	fn report_vote_tallied() -> Weight;
	fn report_vote_executed(r: u32, ) -> Weight;
	fn report_slash() -> Weight;
	fn send_votes(s: u32, ) -> Weight;
	fn vote_on_multiple_disputes(s: u32, ) -> Weight;
	fn on_initialize() -> Weight;
}

/// Weights for tellor using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(19_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Storage: Tellor VoteCount (r:1 w:0)
	/// Storage: Tellor TotalRewardDebt (r:1 w:1)
	/// Storage: Tellor TotalStakeAmount (r:1 w:1)
	/// Storage: Tellor TotalStakers (r:1 w:1)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Storage: System Account (r:1 w:0)
	fn report_stake_deposited() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(35_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Storage: Tellor VoteCount (r:1 w:0)
	/// Storage: Tellor TotalRewardDebt (r:1 w:1)
	/// Storage: Tellor TotalStakeAmount (r:1 w:1)
	/// Storage: Tellor TotalStakers (r:1 w:1)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Storage: System Account (r:1 w:0)
	/// Storage: Tellor ToWithdraw (r:1 w:1)
	fn report_staking_withdraw_request() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(42_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor ToWithdraw (r:1 w:1)
	fn report_stake_withdrawn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(20_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Tellor DataFeeds (r:1 w:1)
	/// Storage: System Account (r:2 w:2)
	/// Storage: Tellor FeedsWithFunding (r:1 w:1)
	/// Storage: Tellor UserTipsTotal (r:1 w:1)
	/// Storage: Tellor QueryData (r:0 w:1)
	/// Storage: Tellor QueryIdFromDataFeedId (r:0 w:1)
	/// The range of component `q` is `[1, 512]`.
	fn setup_data_feed(q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 51_000_000 picoseconds.
		Weight::from_parts(51_796_656, 0)
			// Standard Error: 2_282
			.saturating_add(Weight::from_parts(1_574, 0).saturating_mul(q.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Tellor DataFeeds (r:1 w:1)
	/// Storage: System Account (r:2 w:2)
	/// Storage: Tellor UserTipsTotal (r:1 w:1)
	fn fund_feed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(35_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Tellor ReportedTimestampCount (r:1 w:1)
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor ReportersByTimestamp (r:1 w:1)
	/// Storage: Tellor StakerReportsSubmittedByQueryId (r:1 w:1)
	/// Storage: Tellor ReportedTimestampsByIndex (r:0 w:1)
	/// Storage: Tellor ReportedTimestamps (r:0 w:1)
	/// Storage: Tellor TimeOfLastNewValue (r:0 w:1)
	/// Storage: Tellor ReportedTimestampsToBlockNumber (r:0 w:1)
	/// Storage: Tellor ReportedValuesByTimestamp (r:0 w:1)
	/// The range of component `q` is `[1, 512]`.
	/// The range of component `v` is `[1, 256]`.
	fn submit_value(q: u32, v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(36_299_050, 0)
			// Standard Error: 898
			.saturating_add(Weight::from_parts(608, 0).saturating_mul(q.into()))
			// Standard Error: 1_798
			.saturating_add(Weight::from_parts(1_911, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: System Account (r:2 w:2)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	/// Storage: Tellor TotalStakeAmount (r:1 w:0)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Storage: Tellor TotalRewardDebt (r:1 w:0)
	/// Storage: Tellor RewardRate (r:0 w:1)
	fn add_staking_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(41_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor ReportedTimestampCount (r:2 w:0)
	/// Storage: Tellor ReportedTimestampsByIndex (r:2 w:0)
	/// Storage: Tellor ReportDisputes (r:2 w:0)
	/// Storage: Tellor ReportedValuesByTimestamp (r:2 w:0)
	/// Storage: Tellor StakeAmount (r:1 w:1)
	/// Storage: Tellor DisputeFee (r:1 w:1)
	fn update_stake_amount() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 54_000_000 picoseconds.
		Weight::from_parts(55_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Tellor Tips (r:1 w:1)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor QueryIdsWithFundingIndex (r:1 w:1)
	/// Storage: Tellor ReportedTimestampCount (r:1 w:0)
	/// Storage: Tellor ReportedTimestampsByIndex (r:2 w:0)
	/// Storage: Tellor ReportedValuesByTimestamp (r:2 w:0)
	/// Storage: Tellor QueryIdsWithFunding (r:1 w:1)
	/// Storage: System Account (r:2 w:2)
	/// Storage: Tellor UserTipsTotal (r:1 w:1)
	/// Storage: Tellor QueryData (r:0 w:1)
	/// The range of component `s` is `[2, 256]`.
	/// The range of component `q` is `[1, 512]`.
	fn tip(s: u32, q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 66_000_000 picoseconds.
		Weight::from_parts(62_011_842, 0)
			// Standard Error: 26_758
			.saturating_add(Weight::from_parts(3_658_989, 0).saturating_mul(s.into()))
			// Standard Error: 13_300
			.saturating_add(Weight::from_parts(24_295, 0).saturating_mul(q.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Tellor Tips (r:1 w:1)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor ReportDisputes (r:2 w:0)
	/// Storage: Tellor ReportersByTimestamp (r:2 w:0)
	/// Storage: Tellor ReportedTimestampCount (r:1 w:0)
	/// Storage: Tellor ReportedTimestampsByIndex (r:2 w:0)
	/// Storage: Tellor ReportedValuesByTimestamp (r:2 w:0)
	/// Storage: System Account (r:3 w:3)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	/// Storage: Tellor TotalStakeAmount (r:1 w:0)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Storage: Tellor TotalRewardDebt (r:1 w:0)
	/// Storage: Tellor QueryIdsWithFundingIndex (r:1 w:1)
	/// Storage: Tellor QueryIdsWithFunding (r:1 w:1)
	/// The range of component `s` is `[2, 256]`.
	/// The range of component `t` is `[1, 10]`.
	fn claim_onetime_tip(s: u32, t: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 129_000_000 picoseconds.
		Weight::from_parts(254_116_650, 0)
			// Standard Error: 271_422
			.saturating_add(Weight::from_parts(2_159_170, 0).saturating_mul(s.into()))
			// Standard Error: 7_478_350
			.saturating_add(Weight::from_parts(9_398_102, 0).saturating_mul(t.into()))
			.saturating_add(T::DbWeight::get().reads(31_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: Tellor DataFeeds (r:1 w:1)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor ReportersByTimestamp (r:1 w:0)
	/// Storage: Tellor DataFeedRewardClaimed (r:1 w:1)
	/// Storage: Tellor ReportedValuesByTimestamp (r:1 w:0)
	/// Storage: Tellor ReportedTimestampCount (r:1 w:0)
	/// Storage: Tellor ReportedTimestampsByIndex (r:1 w:0)
	/// Storage: System Account (r:3 w:3)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	/// Storage: Tellor TotalStakeAmount (r:1 w:0)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Storage: Tellor TotalRewardDebt (r:1 w:0)
	/// Storage: Tellor ReportDisputes (r:2 w:0)
	/// Storage: Tellor FeedsWithFunding (r:1 w:1)
	/// The range of component `s` is `[1, 10]`.
	fn claim_tip(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 90_000_000 picoseconds.
		Weight::from_parts(58_330_601, 0)
			// Standard Error: 279_718
			.saturating_add(Weight::from_parts(29_987_704, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
	}
	/// Storage: Tellor StakerDetails (r:2 w:0)
	/// Storage: Tellor ReportedTimestamps (r:1 w:0)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Storage: Tellor VoteRounds (r:1 w:1)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor DisputeFee (r:1 w:0)
	/// Storage: Tellor OpenDisputesOnId (r:1 w:1)
	/// Storage: Tellor ReportedValuesByTimestamp (r:1 w:1)
	/// Storage: Tellor ReportersByTimestamp (r:1 w:0)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Storage: Tellor ReportDisputes (r:1 w:1)
	/// Storage: Tellor ReportedTimestampsByIndex (r:1 w:0)
	/// Storage: Tellor VoteCount (r:1 w:1)
	/// Storage: System Account (r:2 w:2)
	/// Storage: Tellor VoteInfo (r:0 w:1)
	/// Storage: Tellor PendingVotes (r:0 w:1)
	/// Storage: Tellor DisputeIdsByReporter (r:0 w:1)
	/// Storage: Tellor DisputeInfo (r:0 w:1)
	fn begin_dispute() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 89_000_000 picoseconds.
		Weight::from_parts(90_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(16_u64))
			.saturating_add(T::DbWeight::get().writes(11_u64))
	}
	/// Storage: Tellor DisputeInfo (r:1 w:0)
	/// Storage: Tellor VoteRounds (r:1 w:0)
	/// Storage: Tellor VoteInfo (r:1 w:1)
	/// Storage: Tellor Votes (r:1 w:1)
	/// Storage: Tellor StakerDetails (r:1 w:0)
	/// Storage: Tellor UserTipsTotal (r:1 w:0)
	/// Storage: Tellor VoteTallyByAddress (r:1 w:1)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(36_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Tellor VoteRounds (r:1 w:0)
	/// Storage: Tellor VoteInfo (r:1 w:1)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor DisputeInfo (r:1 w:0)
	fn report_vote_tallied() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(27_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Tellor DisputeInfo (r:1 w:0)
	/// Storage: Tellor VoteRounds (r:1 w:0)
	/// Storage: Tellor VoteInfo (r:1 w:1)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor OpenDisputesOnId (r:1 w:1)
	/// Storage: System Account (r:2 w:2)
	/// The range of component `r` is `[1, 255]`.
	fn report_vote_executed(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 48_000_000 picoseconds.
		Weight::from_parts(107_192_099, 0)
			// Standard Error: 128_449
			.saturating_add(Weight::from_parts(547_792, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(14_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	/// Storage: Tellor TotalStakeAmount (r:1 w:1)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Storage: Tellor VoteCount (r:1 w:0)
	/// Storage: Tellor VoteTallyByAddress (r:1 w:0)
	/// Storage: Tellor TotalRewardDebt (r:1 w:1)
	/// Storage: Tellor TotalStakers (r:1 w:1)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Storage: System Account (r:1 w:0)
	/// Storage: Tellor ToWithdraw (r:1 w:1)
	fn report_slash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 47_000_000 picoseconds.
		Weight::from_parts(52_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor PendingVotes (r:2 w:0)
	/// Storage: Tellor VoteInfo (r:54 w:54)
	/// The range of component `s` is `[1, 255]`.
	fn send_votes(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(16_000_000, 0)
			// Standard Error: 115_475
			.saturating_add(Weight::from_parts(16_528_531, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(s.into())))
	}
	/// Storage: Tellor DisputeInfo (r:2 w:0)
	/// Storage: Tellor VoteRounds (r:2 w:0)
	/// Storage: Tellor VoteInfo (r:2 w:2)
	/// Storage: Tellor Votes (r:2 w:2)
	/// Storage: Tellor StakerDetails (r:1 w:0)
	/// Storage: Tellor UserTipsTotal (r:1 w:0)
	/// Storage: Tellor VoteTallyByAddress (r:1 w:1)
	/// The range of component `s` is `[2, 10]`.
	fn vote_on_multiple_disputes(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 57_000_000 picoseconds.
		Weight::from_parts(15_433_333, 0)
			// Standard Error: 360_406
			.saturating_add(Weight::from_parts(20_050_000, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(s.into())))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor LastStakeAmountUpdate (r:1 w:0)
	/// Storage: Tellor ReportedTimestampCount (r:1 w:0)
	/// Storage: Tellor PendingVotes (r:4 w:0)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(32_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(7_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(19_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Storage: Tellor VoteCount (r:1 w:0)
	/// Storage: Tellor TotalRewardDebt (r:1 w:1)
	/// Storage: Tellor TotalStakeAmount (r:1 w:1)
	/// Storage: Tellor TotalStakers (r:1 w:1)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Storage: System Account (r:1 w:0)
	fn report_stake_deposited() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(35_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Storage: Tellor VoteCount (r:1 w:0)
	/// Storage: Tellor TotalRewardDebt (r:1 w:1)
	/// Storage: Tellor TotalStakeAmount (r:1 w:1)
	/// Storage: Tellor TotalStakers (r:1 w:1)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Storage: System Account (r:1 w:0)
	/// Storage: Tellor ToWithdraw (r:1 w:1)
	fn report_staking_withdraw_request() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(42_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor ToWithdraw (r:1 w:1)
	fn report_stake_withdrawn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(20_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Tellor DataFeeds (r:1 w:1)
	/// Storage: System Account (r:2 w:2)
	/// Storage: Tellor FeedsWithFunding (r:1 w:1)
	/// Storage: Tellor UserTipsTotal (r:1 w:1)
	/// Storage: Tellor QueryData (r:0 w:1)
	/// Storage: Tellor QueryIdFromDataFeedId (r:0 w:1)
	/// The range of component `q` is `[1, 512]`.
	fn setup_data_feed(q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 51_000_000 picoseconds.
		Weight::from_parts(51_796_656, 0)
			// Standard Error: 2_282
			.saturating_add(Weight::from_parts(1_574, 0).saturating_mul(q.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Tellor DataFeeds (r:1 w:1)
	/// Storage: System Account (r:2 w:2)
	/// Storage: Tellor UserTipsTotal (r:1 w:1)
	fn fund_feed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(35_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Tellor ReportedTimestampCount (r:1 w:1)
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor ReportersByTimestamp (r:1 w:1)
	/// Storage: Tellor StakerReportsSubmittedByQueryId (r:1 w:1)
	/// Storage: Tellor ReportedTimestampsByIndex (r:0 w:1)
	/// Storage: Tellor ReportedTimestamps (r:0 w:1)
	/// Storage: Tellor TimeOfLastNewValue (r:0 w:1)
	/// Storage: Tellor ReportedTimestampsToBlockNumber (r:0 w:1)
	/// Storage: Tellor ReportedValuesByTimestamp (r:0 w:1)
	/// The range of component `q` is `[1, 512]`.
	/// The range of component `v` is `[1, 256]`.
	fn submit_value(q: u32, v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(36_299_050, 0)
			// Standard Error: 898
			.saturating_add(Weight::from_parts(608, 0).saturating_mul(q.into()))
			// Standard Error: 1_798
			.saturating_add(Weight::from_parts(1_911, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	/// Storage: System Account (r:2 w:2)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	/// Storage: Tellor TotalStakeAmount (r:1 w:0)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Storage: Tellor TotalRewardDebt (r:1 w:0)
	/// Storage: Tellor RewardRate (r:0 w:1)
	fn add_staking_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(41_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor ReportedTimestampCount (r:2 w:0)
	/// Storage: Tellor ReportedTimestampsByIndex (r:2 w:0)
	/// Storage: Tellor ReportDisputes (r:2 w:0)
	/// Storage: Tellor ReportedValuesByTimestamp (r:2 w:0)
	/// Storage: Tellor StakeAmount (r:1 w:1)
	/// Storage: Tellor DisputeFee (r:1 w:1)
	fn update_stake_amount() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 54_000_000 picoseconds.
		Weight::from_parts(55_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Tellor Tips (r:1 w:1)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor QueryIdsWithFundingIndex (r:1 w:1)
	/// Storage: Tellor ReportedTimestampCount (r:1 w:0)
	/// Storage: Tellor ReportedTimestampsByIndex (r:2 w:0)
	/// Storage: Tellor ReportedValuesByTimestamp (r:2 w:0)
	/// Storage: Tellor QueryIdsWithFunding (r:1 w:1)
	/// Storage: System Account (r:2 w:2)
	/// Storage: Tellor UserTipsTotal (r:1 w:1)
	/// Storage: Tellor QueryData (r:0 w:1)
	/// The range of component `s` is `[2, 256]`.
	/// The range of component `q` is `[1, 512]`.
	fn tip(s: u32, q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 66_000_000 picoseconds.
		Weight::from_parts(62_011_842, 0)
			// Standard Error: 26_758
			.saturating_add(Weight::from_parts(3_658_989, 0).saturating_mul(s.into()))
			// Standard Error: 13_300
			.saturating_add(Weight::from_parts(24_295, 0).saturating_mul(q.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Tellor Tips (r:1 w:1)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor ReportDisputes (r:2 w:0)
	/// Storage: Tellor ReportersByTimestamp (r:2 w:0)
	/// Storage: Tellor ReportedTimestampCount (r:1 w:0)
	/// Storage: Tellor ReportedTimestampsByIndex (r:2 w:0)
	/// Storage: Tellor ReportedValuesByTimestamp (r:2 w:0)
	/// Storage: System Account (r:3 w:3)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	/// Storage: Tellor TotalStakeAmount (r:1 w:0)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Storage: Tellor TotalRewardDebt (r:1 w:0)
	/// Storage: Tellor QueryIdsWithFundingIndex (r:1 w:1)
	/// Storage: Tellor QueryIdsWithFunding (r:1 w:1)
	/// The range of component `s` is `[2, 256]`.
	/// The range of component `t` is `[1, 10]`.
	fn claim_onetime_tip(s: u32, t: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 129_000_000 picoseconds.
		Weight::from_parts(254_116_650, 0)
			// Standard Error: 271_422
			.saturating_add(Weight::from_parts(2_159_170, 0).saturating_mul(s.into()))
			// Standard Error: 7_478_350
			.saturating_add(Weight::from_parts(9_398_102, 0).saturating_mul(t.into()))
			.saturating_add(RocksDbWeight::get().reads(31_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(t.into())))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	/// Storage: Tellor DataFeeds (r:1 w:1)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor ReportersByTimestamp (r:1 w:0)
	/// Storage: Tellor DataFeedRewardClaimed (r:1 w:1)
	/// Storage: Tellor ReportedValuesByTimestamp (r:1 w:0)
	/// Storage: Tellor ReportedTimestampCount (r:1 w:0)
	/// Storage: Tellor ReportedTimestampsByIndex (r:1 w:0)
	/// Storage: System Account (r:3 w:3)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	/// Storage: Tellor TotalStakeAmount (r:1 w:0)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Storage: Tellor TotalRewardDebt (r:1 w:0)
	/// Storage: Tellor ReportDisputes (r:2 w:0)
	/// Storage: Tellor FeedsWithFunding (r:1 w:1)
	/// The range of component `s` is `[1, 10]`.
	fn claim_tip(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 90_000_000 picoseconds.
		Weight::from_parts(58_330_601, 0)
			// Standard Error: 279_718
			.saturating_add(Weight::from_parts(29_987_704, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().reads((5_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(s.into())))
	}
	/// Storage: Tellor StakerDetails (r:2 w:0)
	/// Storage: Tellor ReportedTimestamps (r:1 w:0)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Storage: Tellor VoteRounds (r:1 w:1)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor DisputeFee (r:1 w:0)
	/// Storage: Tellor OpenDisputesOnId (r:1 w:1)
	/// Storage: Tellor ReportedValuesByTimestamp (r:1 w:1)
	/// Storage: Tellor ReportersByTimestamp (r:1 w:0)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Storage: Tellor ReportDisputes (r:1 w:1)
	/// Storage: Tellor ReportedTimestampsByIndex (r:1 w:0)
	/// Storage: Tellor VoteCount (r:1 w:1)
	/// Storage: System Account (r:2 w:2)
	/// Storage: Tellor VoteInfo (r:0 w:1)
	/// Storage: Tellor PendingVotes (r:0 w:1)
	/// Storage: Tellor DisputeIdsByReporter (r:0 w:1)
	/// Storage: Tellor DisputeInfo (r:0 w:1)
	fn begin_dispute() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 89_000_000 picoseconds.
		Weight::from_parts(90_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(16_u64))
			.saturating_add(RocksDbWeight::get().writes(11_u64))
	}
	/// Storage: Tellor DisputeInfo (r:1 w:0)
	/// Storage: Tellor VoteRounds (r:1 w:0)
	/// Storage: Tellor VoteInfo (r:1 w:1)
	/// Storage: Tellor Votes (r:1 w:1)
	/// Storage: Tellor StakerDetails (r:1 w:0)
	/// Storage: Tellor UserTipsTotal (r:1 w:0)
	/// Storage: Tellor VoteTallyByAddress (r:1 w:1)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(36_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Tellor VoteRounds (r:1 w:0)
	/// Storage: Tellor VoteInfo (r:1 w:1)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor DisputeInfo (r:1 w:0)
	fn report_vote_tallied() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(27_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Tellor DisputeInfo (r:1 w:0)
	/// Storage: Tellor VoteRounds (r:1 w:0)
	/// Storage: Tellor VoteInfo (r:1 w:1)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor OpenDisputesOnId (r:1 w:1)
	/// Storage: System Account (r:2 w:2)
	/// The range of component `r` is `[1, 255]`.
	fn report_vote_executed(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 48_000_000 picoseconds.
		Weight::from_parts(107_192_099, 0)
			// Standard Error: 128_449
			.saturating_add(Weight::from_parts(547_792, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(14_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	/// Storage: Tellor TotalStakeAmount (r:1 w:1)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Storage: Tellor VoteCount (r:1 w:0)
	/// Storage: Tellor VoteTallyByAddress (r:1 w:0)
	/// Storage: Tellor TotalRewardDebt (r:1 w:1)
	/// Storage: Tellor TotalStakers (r:1 w:1)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Storage: System Account (r:1 w:0)
	/// Storage: Tellor ToWithdraw (r:1 w:1)
	fn report_slash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 47_000_000 picoseconds.
		Weight::from_parts(52_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor PendingVotes (r:2 w:0)
	/// Storage: Tellor VoteInfo (r:54 w:54)
	/// The range of component `s` is `[1, 255]`.
	fn send_votes(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(16_000_000, 0)
			// Standard Error: 115_475
			.saturating_add(Weight::from_parts(16_528_531, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(s.into())))
	}
	/// Storage: Tellor DisputeInfo (r:2 w:0)
	/// Storage: Tellor VoteRounds (r:2 w:0)
	/// Storage: Tellor VoteInfo (r:2 w:2)
	/// Storage: Tellor Votes (r:2 w:2)
	/// Storage: Tellor StakerDetails (r:1 w:0)
	/// Storage: Tellor UserTipsTotal (r:1 w:0)
	/// Storage: Tellor VoteTallyByAddress (r:1 w:1)
	/// The range of component `s` is `[2, 10]`.
	fn vote_on_multiple_disputes(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 57_000_000 picoseconds.
		Weight::from_parts(15_433_333, 0)
			// Standard Error: 360_406
			.saturating_add(Weight::from_parts(20_050_000, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(s.into())))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Storage: Tellor LastStakeAmountUpdate (r:1 w:0)
	/// Storage: Tellor ReportedTimestampCount (r:1 w:0)
	/// Storage: Tellor PendingVotes (r:4 w:0)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  ``
		//  Estimated: ``
		// Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(32_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
	}
}
