
//! Autogenerated weights for `tellor`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-05, STEPS: `10`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Pawans-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/parachain-template-node
// benchmark
// pallet
// --chain
// dev
// --pallet
// tellor
// --extrinsic
// *
// --steps
// 10
// --repeat
// 10
// --output
// ./weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use frame_support::weights::constants::RocksDbWeight;
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn register() -> Weight;
	fn report_stake_deposited() -> Weight;
	fn report_staking_withdraw_request() -> Weight;
	fn report_stake_withdrawn() -> Weight;
	fn setup_data_feed() -> Weight;
	fn fund_feed() -> Weight;
	fn submit_value() -> Weight;
	fn add_staking_rewards() -> Weight;
	fn update_stake_amount() -> Weight;
	fn tip(s: u32) -> Weight;
	fn claim_onetime_tip(s: u32) -> Weight;
	fn claim_tip(s: u32) -> Weight;
	fn begin_dispute(s: u32) -> Weight;
	fn vote() -> Weight;
	fn report_vote_tallied() -> Weight;
	fn report_vote_executed(r: u32) -> Weight;
	fn report_slash() -> Weight;
	fn send_votes(s: u32) -> Weight;
	fn vote_on_multiple_disputes(s: u32) -> Weight;
	fn on_initialize() -> Weight;

}

/// Weight functions for `tellor`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	fn register() -> Weight {
		// Minimum execution time: 10_000 nanoseconds.
		Weight::from_ref_time(11_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: Tellor StakerDetails (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	// Storage: Tellor VoteCount (r:1 w:0)
	// Storage: Tellor TotalRewardDebt (r:1 w:1)
	// Storage: Tellor TotalStakeAmount (r:1 w:1)
	// Storage: Tellor TotalStakers (r:1 w:1)
	// Storage: Tellor StakeAmount (r:1 w:0)
	// Storage: Tellor RewardRate (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	fn report_stake_deposited() -> Weight {
		// Minimum execution time: 30_000 nanoseconds.
		Weight::from_ref_time(31_000_000)
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: Tellor StakerDetails (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	// Storage: Tellor VoteCount (r:1 w:0)
	// Storage: Tellor TotalRewardDebt (r:1 w:1)
	// Storage: Tellor TotalStakeAmount (r:1 w:1)
	// Storage: Tellor TotalStakers (r:1 w:1)
	// Storage: Tellor StakeAmount (r:1 w:0)
	// Storage: Tellor RewardRate (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Tellor ToWithdraw (r:1 w:1)
	fn report_staking_withdraw_request() -> Weight {
		// Minimum execution time: 34_000 nanoseconds.
		Weight::from_ref_time(34_000_000)
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Tellor StakerDetails (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor ToWithdraw (r:1 w:1)
	fn report_stake_withdrawn() -> Weight {
		// Minimum execution time: 15_000 nanoseconds.
		Weight::from_ref_time(16_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Tellor DataFeeds (r:1 w:1)
	// Storage: Tellor CurrentFeeds (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Tellor FeedsWithFunding (r:1 w:1)
	// Storage: Tellor UserTipsTotal (r:1 w:1)
	// Storage: Tellor QueryData (r:0 w:1)
	// Storage: Tellor QueryIdFromDataFeedId (r:0 w:1)
	fn setup_data_feed() -> Weight {
		// Minimum execution time: 29_000 nanoseconds.
		Weight::from_ref_time(30_000_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	// Storage: Tellor DataFeeds (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Tellor UserTipsTotal (r:1 w:1)
	fn fund_feed() -> Weight {
		// Minimum execution time: 20_000 nanoseconds.
		Weight::from_ref_time(21_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Tellor Reports (r:1 w:1)
	// Storage: Tellor StakerDetails (r:1 w:1)
	// Storage: Tellor StakeAmount (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor TimeOfLastNewValue (r:0 w:1)
	fn submit_value() -> Weight {
		// Minimum execution time: 20_000 nanoseconds.
		Weight::from_ref_time(21_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	// Storage: Tellor TotalStakeAmount (r:1 w:0)
	// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	// Storage: Tellor TotalRewardDebt (r:1 w:0)
	// Storage: Tellor RewardRate (r:0 w:1)
	fn add_staking_rewards() -> Weight {
		// Minimum execution time: 22_000 nanoseconds.
		Weight::from_ref_time(25_000_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor Reports (r:2 w:0)
	// Storage: Tellor StakeAmount (r:1 w:1)
	// Storage: Tellor DisputeFee (r:1 w:1)
	fn update_stake_amount() -> Weight {
		// Minimum execution time: 30_000 nanoseconds.
		Weight::from_ref_time(33_000_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Tellor Tips (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor QueryIdsWithFundingIndex (r:1 w:1)
	// Storage: Tellor Reports (r:1 w:0)
	// Storage: Tellor QueryIdsWithFunding (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Tellor UserTipsTotal (r:1 w:1)
	// Storage: Tellor QueryData (r:0 w:1)
	/// The range of component `s` is `[2, 1000]`.
	fn tip(s: u32, ) -> Weight {
		// Minimum execution time: 35_000 nanoseconds.
		Weight::from_ref_time(49_863_683)
			// Standard Error: 7_740
			.saturating_add(Weight::from_ref_time(568_323).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Tellor Tips (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	// Storage: Tellor TotalStakeAmount (r:1 w:0)
	// Storage: Tellor RewardRate (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	// Storage: Tellor TotalRewardDebt (r:1 w:0)
	// Storage: Tellor Reports (r:1 w:0)
	/// The range of component `s` is `[1, 10]`.
	fn claim_onetime_tip(s: u32, ) -> Weight {
		// Minimum execution time: 26_000 nanoseconds.
		Weight::from_ref_time(26_000_000)
			// Standard Error: 1_291_207
			.saturating_add(Weight::from_ref_time(41_958_441).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Tellor DataFeeds (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor Reports (r:1 w:0)
	// Storage: System Account (r:3 w:3)
	// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	// Storage: Tellor TotalStakeAmount (r:1 w:0)
	// Storage: Tellor RewardRate (r:1 w:1)
	// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	// Storage: Tellor TotalRewardDebt (r:1 w:0)
	// Storage: Tellor FeedsWithFunding (r:1 w:1)
	/// The range of component `s` is `[2, 10]`.
	fn claim_tip(s: u32, ) -> Weight {
		// Minimum execution time: 55_000 nanoseconds.
		Weight::from_ref_time(55_000_000)
			// Standard Error: 703_336
			.saturating_add(Weight::from_ref_time(17_761_206).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Tellor StakerDetails (r:2 w:0)
	// Storage: Tellor Reports (r:1 w:1)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: Tellor VoteRounds (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor DisputeFee (r:1 w:0)
	// Storage: Tellor OpenDisputesOnId (r:1 w:1)
	// Storage: Tellor StakeAmount (r:1 w:0)
	// Storage: Tellor VoteCount (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Tellor VoteInfo (r:0 w:1)
	// Storage: Tellor PendingVotes (r:0 w:1)
	// Storage: Tellor DisputeIdsByReporter (r:0 w:1)
	// Storage: Tellor DisputeInfo (r:0 w:1)
	/// The range of component `s` is `[1, 1000]`.
	fn begin_dispute(s: u32, ) -> Weight {
		// Minimum execution time: 43_000 nanoseconds.
		Weight::from_ref_time(49_965_265)
			// Standard Error: 6_291
			.saturating_add(Weight::from_ref_time(525_643).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(10))
	}
	// Storage: Tellor DisputeInfo (r:1 w:0)
	// Storage: Tellor VoteRounds (r:1 w:0)
	// Storage: Tellor VoteInfo (r:1 w:1)
	// Storage: Tellor StakerDetails (r:1 w:0)
	// Storage: Tellor UserTipsTotal (r:1 w:0)
	// Storage: Tellor VoteTallyByAddress (r:1 w:1)
	fn vote() -> Weight {
		// Minimum execution time: 21_000 nanoseconds.
		Weight::from_ref_time(22_000_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Tellor VoteRounds (r:1 w:0)
	// Storage: Tellor VoteInfo (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor DisputeInfo (r:1 w:0)
	fn report_vote_tallied() -> Weight {
		// Minimum execution time: 19_000 nanoseconds.
		Weight::from_ref_time(19_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Tellor DisputeInfo (r:1 w:0)
	// Storage: Tellor VoteRounds (r:1 w:0)
	// Storage: Tellor VoteInfo (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor OpenDisputesOnId (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	/// The range of component `r` is `[3, 1000]`.
	fn report_vote_executed(r: u32, ) -> Weight {
		// Minimum execution time: 30_000 nanoseconds.
		Weight::from_ref_time(86_771_469)
			// Standard Error: 9_293
			.saturating_add(Weight::from_ref_time(71_167).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(19))
			.saturating_add(T::DbWeight::get().writes(10))
	}
	// Storage: Tellor StakerDetails (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	// Storage: Tellor TotalStakeAmount (r:1 w:1)
	// Storage: Tellor RewardRate (r:1 w:1)
	// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	// Storage: Tellor VoteCount (r:1 w:0)
	// Storage: Tellor VoteTallyByAddress (r:1 w:0)
	// Storage: Tellor TotalRewardDebt (r:1 w:1)
	// Storage: Tellor TotalStakers (r:1 w:1)
	// Storage: Tellor StakeAmount (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Tellor ToWithdraw (r:1 w:1)
	fn report_slash() -> Weight {
		// Minimum execution time: 29_000 nanoseconds.
		Weight::from_ref_time(29_000_000)
			.saturating_add(T::DbWeight::get().reads(13))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor PendingVotes (r:1 w:0)
	// Storage: Tellor VoteInfo (r:100 w:100)
	/// The range of component `s` is `[2, 1000]`.
	fn send_votes(s: u32, ) -> Weight {
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(440_877_298)
			// Standard Error: 95_402
			.saturating_add(Weight::from_ref_time(7_004_839).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(108))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes(217))
	}
	// Storage: Tellor DisputeInfo (r:2 w:0)
	// Storage: Tellor VoteRounds (r:2 w:0)
	// Storage: Tellor VoteInfo (r:2 w:2)
	// Storage: Tellor StakerDetails (r:1 w:0)
	// Storage: Tellor UserTipsTotal (r:1 w:0)
	// Storage: Tellor VoteTallyByAddress (r:1 w:1)
	/// The range of component `s` is `[2, 10]`.
	fn vote_on_multiple_disputes(s: u32, ) -> Weight {
		// Minimum execution time: 32_000 nanoseconds.
		Weight::from_ref_time(16_001_808)
			// Standard Error: 86_040
			.saturating_add(Weight::from_ref_time(7_716_551).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor LastStakeAmountUpdate (r:1 w:0)
	// Storage: Tellor Reports (r:1 w:0)
	// Storage: Tellor PendingVotes (r:4 w:0)
	fn on_initialize() -> Weight {
		// Minimum execution time: 23_000 nanoseconds.
		Weight::from_ref_time(23_000_000)
			.saturating_add(T::DbWeight::get().reads(7))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	fn register() -> Weight {
		// Minimum execution time: 10_000 nanoseconds.
		Weight::from_ref_time(11_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
	}
	// Storage: Tellor StakerDetails (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	// Storage: Tellor VoteCount (r:1 w:0)
	// Storage: Tellor TotalRewardDebt (r:1 w:1)
	// Storage: Tellor TotalStakeAmount (r:1 w:1)
	// Storage: Tellor TotalStakers (r:1 w:1)
	// Storage: Tellor StakeAmount (r:1 w:0)
	// Storage: Tellor RewardRate (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	fn report_stake_deposited() -> Weight {
		// Minimum execution time: 30_000 nanoseconds.
		Weight::from_ref_time(31_000_000)
			.saturating_add(RocksDbWeight::get().reads(11))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	// Storage: Tellor StakerDetails (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	// Storage: Tellor VoteCount (r:1 w:0)
	// Storage: Tellor TotalRewardDebt (r:1 w:1)
	// Storage: Tellor TotalStakeAmount (r:1 w:1)
	// Storage: Tellor TotalStakers (r:1 w:1)
	// Storage: Tellor StakeAmount (r:1 w:0)
	// Storage: Tellor RewardRate (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Tellor ToWithdraw (r:1 w:1)
	fn report_staking_withdraw_request() -> Weight {
		// Minimum execution time: 34_000 nanoseconds.
		Weight::from_ref_time(34_000_000)
			.saturating_add(RocksDbWeight::get().reads(12))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: Tellor StakerDetails (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor ToWithdraw (r:1 w:1)
	fn report_stake_withdrawn() -> Weight {
		// Minimum execution time: 15_000 nanoseconds.
		Weight::from_ref_time(16_000_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Tellor DataFeeds (r:1 w:1)
	// Storage: Tellor CurrentFeeds (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Tellor FeedsWithFunding (r:1 w:1)
	// Storage: Tellor UserTipsTotal (r:1 w:1)
	// Storage: Tellor QueryData (r:0 w:1)
	// Storage: Tellor QueryIdFromDataFeedId (r:0 w:1)
	fn setup_data_feed() -> Weight {
		// Minimum execution time: 29_000 nanoseconds.
		Weight::from_ref_time(30_000_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	// Storage: Tellor DataFeeds (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Tellor UserTipsTotal (r:1 w:1)
	fn fund_feed() -> Weight {
		// Minimum execution time: 20_000 nanoseconds.
		Weight::from_ref_time(21_000_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: Tellor Reports (r:1 w:1)
	// Storage: Tellor StakerDetails (r:1 w:1)
	// Storage: Tellor StakeAmount (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor TimeOfLastNewValue (r:0 w:1)
	fn submit_value() -> Weight {
		// Minimum execution time: 20_000 nanoseconds.
		Weight::from_ref_time(21_000_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	// Storage: Tellor TotalStakeAmount (r:1 w:0)
	// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	// Storage: Tellor TotalRewardDebt (r:1 w:0)
	// Storage: Tellor RewardRate (r:0 w:1)
	fn add_staking_rewards() -> Weight {
		// Minimum execution time: 22_000 nanoseconds.
		Weight::from_ref_time(25_000_000)
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor Reports (r:2 w:0)
	// Storage: Tellor StakeAmount (r:1 w:1)
	// Storage: Tellor DisputeFee (r:1 w:1)
	fn update_stake_amount() -> Weight {
		// Minimum execution time: 30_000 nanoseconds.
		Weight::from_ref_time(33_000_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Tellor Tips (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor QueryIdsWithFundingIndex (r:1 w:1)
	// Storage: Tellor Reports (r:1 w:0)
	// Storage: Tellor QueryIdsWithFunding (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Tellor UserTipsTotal (r:1 w:1)
	// Storage: Tellor QueryData (r:0 w:1)
	/// The range of component `s` is `[2, 1000]`.
	fn tip(s: u32, ) -> Weight {
		// Minimum execution time: 35_000 nanoseconds.
		Weight::from_ref_time(49_863_683)
			// Standard Error: 7_740
			.saturating_add(Weight::from_ref_time(568_323).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	// Storage: Tellor Tips (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	// Storage: Tellor TotalStakeAmount (r:1 w:0)
	// Storage: Tellor RewardRate (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	// Storage: Tellor TotalRewardDebt (r:1 w:0)
	// Storage: Tellor Reports (r:1 w:0)
	/// The range of component `s` is `[1, 10]`.
	fn claim_onetime_tip(s: u32, ) -> Weight {
		// Minimum execution time: 26_000 nanoseconds.
		Weight::from_ref_time(26_000_000)
			// Standard Error: 1_291_207
			.saturating_add(Weight::from_ref_time(41_958_441).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(10))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: Tellor DataFeeds (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor Reports (r:1 w:0)
	// Storage: System Account (r:3 w:3)
	// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	// Storage: Tellor TotalStakeAmount (r:1 w:0)
	// Storage: Tellor RewardRate (r:1 w:1)
	// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	// Storage: Tellor TotalRewardDebt (r:1 w:0)
	// Storage: Tellor FeedsWithFunding (r:1 w:1)
	/// The range of component `s` is `[2, 10]`.
	fn claim_tip(s: u32, ) -> Weight {
		// Minimum execution time: 55_000 nanoseconds.
		Weight::from_ref_time(55_000_000)
			// Standard Error: 703_336
			.saturating_add(Weight::from_ref_time(17_761_206).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(11))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: Tellor StakerDetails (r:2 w:0)
	// Storage: Tellor Reports (r:1 w:1)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: Tellor VoteRounds (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor DisputeFee (r:1 w:0)
	// Storage: Tellor OpenDisputesOnId (r:1 w:1)
	// Storage: Tellor StakeAmount (r:1 w:0)
	// Storage: Tellor VoteCount (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Tellor VoteInfo (r:0 w:1)
	// Storage: Tellor PendingVotes (r:0 w:1)
	// Storage: Tellor DisputeIdsByReporter (r:0 w:1)
	// Storage: Tellor DisputeInfo (r:0 w:1)
	/// The range of component `s` is `[1, 1000]`.
	fn begin_dispute(s: u32, ) -> Weight {
		// Minimum execution time: 43_000 nanoseconds.
		Weight::from_ref_time(49_965_265)
			// Standard Error: 6_291
			.saturating_add(Weight::from_ref_time(525_643).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(12))
			.saturating_add(RocksDbWeight::get().writes(10))
	}
	// Storage: Tellor DisputeInfo (r:1 w:0)
	// Storage: Tellor VoteRounds (r:1 w:0)
	// Storage: Tellor VoteInfo (r:1 w:1)
	// Storage: Tellor StakerDetails (r:1 w:0)
	// Storage: Tellor UserTipsTotal (r:1 w:0)
	// Storage: Tellor VoteTallyByAddress (r:1 w:1)
	fn vote() -> Weight {
		// Minimum execution time: 21_000 nanoseconds.
		Weight::from_ref_time(22_000_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Tellor VoteRounds (r:1 w:0)
	// Storage: Tellor VoteInfo (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor DisputeInfo (r:1 w:0)
	fn report_vote_tallied() -> Weight {
		// Minimum execution time: 19_000 nanoseconds.
		Weight::from_ref_time(19_000_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Tellor DisputeInfo (r:1 w:0)
	// Storage: Tellor VoteRounds (r:1 w:0)
	// Storage: Tellor VoteInfo (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor OpenDisputesOnId (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	/// The range of component `r` is `[3, 1000]`.
	fn report_vote_executed(r: u32, ) -> Weight {
		// Minimum execution time: 30_000 nanoseconds.
		Weight::from_ref_time(86_771_469)
			// Standard Error: 9_293
			.saturating_add(Weight::from_ref_time(71_167).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(19))
			.saturating_add(RocksDbWeight::get().writes(10))
	}
	// Storage: Tellor StakerDetails (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	// Storage: Tellor TotalStakeAmount (r:1 w:1)
	// Storage: Tellor RewardRate (r:1 w:1)
	// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	// Storage: Tellor VoteCount (r:1 w:0)
	// Storage: Tellor VoteTallyByAddress (r:1 w:0)
	// Storage: Tellor TotalRewardDebt (r:1 w:1)
	// Storage: Tellor TotalStakers (r:1 w:1)
	// Storage: Tellor StakeAmount (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Tellor ToWithdraw (r:1 w:1)
	fn report_slash() -> Weight {
		// Minimum execution time: 29_000 nanoseconds.
		Weight::from_ref_time(29_000_000)
			.saturating_add(RocksDbWeight::get().reads(13))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor PendingVotes (r:1 w:0)
	// Storage: Tellor VoteInfo (r:100 w:100)
	/// The range of component `s` is `[2, 1000]`.
	fn send_votes(s: u32, ) -> Weight {
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(440_877_298)
			// Standard Error: 95_402
			.saturating_add(Weight::from_ref_time(7_004_839).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(108))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes(217))
	}
	// Storage: Tellor DisputeInfo (r:2 w:0)
	// Storage: Tellor VoteRounds (r:2 w:0)
	// Storage: Tellor VoteInfo (r:2 w:2)
	// Storage: Tellor StakerDetails (r:1 w:0)
	// Storage: Tellor UserTipsTotal (r:1 w:0)
	// Storage: Tellor VoteTallyByAddress (r:1 w:1)
	/// The range of component `s` is `[2, 10]`.
	fn vote_on_multiple_disputes(s: u32, ) -> Weight {
		// Minimum execution time: 32_000 nanoseconds.
		Weight::from_ref_time(16_001_808)
			// Standard Error: 86_040
			.saturating_add(Weight::from_ref_time(7_716_551).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes(1))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(s.into())))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Tellor LastStakeAmountUpdate (r:1 w:0)
	// Storage: Tellor Reports (r:1 w:0)
	// Storage: Tellor PendingVotes (r:4 w:0)
	fn on_initialize() -> Weight {
		// Minimum execution time: 23_000 nanoseconds.
		Weight::from_ref_time(23_000_000)
			.saturating_add(RocksDbWeight::get().reads(7))
	}
}
