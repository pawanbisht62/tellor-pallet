
//! Autogenerated weights for tellor
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-19, STEPS: `3`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `parityio.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/parachain-template-node
// benchmark
// pallet
// --chain
// dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// tellor
// --extrinsic
// *
// --steps
// 3
// --repeat
// 2
// --output
// ../tellor-pallet/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for tellor.
pub trait WeightInfo {
	fn register() -> Weight;
	fn claim_onetime_tip(s: u32, t: u32, ) -> Weight;
	fn claim_tip(s: u32, t: u32, ) -> Weight;
	fn fund_feed() -> Weight;
	fn setup_data_feed(q: u32, ) -> Weight;
	fn tip(s: u32, q: u32, ) -> Weight;
	fn add_staking_rewards() -> Weight;
	fn submit_value(q: u32, v: u32, ) -> Weight;
	fn update_stake_amount() -> Weight;
	fn begin_dispute() -> Weight;
	fn vote() -> Weight;
	fn vote_on_multiple_disputes(s: u32, ) -> Weight;
	fn send_votes(s: u32, ) -> Weight;
	fn report_stake_deposited() -> Weight;
	fn report_staking_withdraw_request() -> Weight;
	fn report_stake_withdrawn() -> Weight;
	fn report_slash() -> Weight;
	fn report_vote_tallied() -> Weight;
	fn report_vote_executed(r: u32, ) -> Weight;
	fn on_initialize() -> Weight;
}

/// Weights for tellor using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	/// Proof Skipped: ParachainSystem HostConfiguration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	/// Proof Skipped: ParachainSystem PendingUpwardMessages (max_values: Some(1), max_size: None, mode: Measured)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `38`
		//  Estimated: `4_535`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(46_000_000, 4_535)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Tellor TipCount (r:1 w:0)
	/// Proof: Tellor TipCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestamps (r:100 w:0)
	/// Proof: Tellor ReportedTimestamps (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// Storage: Tellor Tips (r:101 w:100)
	/// Proof: Tellor Tips (max_values: None, max_size: Some(92), added: 2567, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampCount (r:1 w:0)
	/// Proof: Tellor ReportedTimestampCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:5000 w:0)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:5000 w:0)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// Storage: System Account (r:3 w:3)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:0)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:0)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor QueryIdsWithFunding (r:0 w:1)
	/// Proof: Tellor QueryIdsWithFunding (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 5000]`.
	/// The range of component `t` is `[1, 100]`.
	fn claim_onetime_tip(s: u32, t: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + s * (42 ±0) + t * (490 ±0)`
		//  Estimated: `39_230 + s * (5291 ±8) + t * (4128 ±437)`
		// Minimum execution time: 124_000_000 picoseconds.
		Weight::from_parts(124_000_000, 39_230)
			// Standard Error: 502_906
			.saturating_add(Weight::from_parts(10_281_358, 0).saturating_mul(s.into()))
			// Standard Error: 25_144_914
			.saturating_add(Weight::from_parts(57_487_707, 0).saturating_mul(t.into()))
			.saturating_add(T::DbWeight::get().reads(15_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(t.into())))
			.saturating_add(Weight::from_parts(0, 5291).saturating_mul(s.into()))
			.saturating_add(Weight::from_parts(0, 4128).saturating_mul(t.into()))
	}
	/// Storage: Tellor DataFeeds (r:1 w:1)
	/// Proof: Tellor DataFeeds (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestamps (r:101 w:0)
	/// Proof: Tellor ReportedTimestamps (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// Storage: Tellor DataFeedRewardClaimed (r:100 w:100)
	/// Proof: Tellor DataFeedRewardClaimed (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:101 w:0)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampCount (r:1 w:0)
	/// Proof: Tellor ReportedTimestampCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:116 w:0)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: System Account (r:3 w:3)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:0)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:0)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor FeedsWithFunding (r:0 w:1)
	/// Proof: Tellor FeedsWithFunding (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 5000]`.
	/// The range of component `t` is `[1, 100]`.
	fn claim_tip(s: u32, t: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1_263 + s * (27 ±0)`
		//  Estimated: `36_719 + s * (210 ±11) + t * (1861 ±595)`
		// Minimum execution time: 110_000_000 picoseconds.
		Weight::from_parts(194_144_639, 36_719)
			// Standard Error: 335_630
			.saturating_add(Weight::from_parts(2_454_978, 0).saturating_mul(s.into()))
			// Standard Error: 16_926_494
			.saturating_add(Weight::from_parts(11_303_990, 0).saturating_mul(t.into()))
			.saturating_add(T::DbWeight::get().reads(14_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 210).saturating_mul(s.into()))
			.saturating_add(Weight::from_parts(0, 1861).saturating_mul(t.into()))
	}
	/// Storage: Tellor DataFeeds (r:1 w:1)
	/// Proof: Tellor DataFeeds (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor UserTipsTotal (r:1 w:1)
	/// Proof: Tellor UserTipsTotal (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Tellor FeedsWithFunding (r:0 w:1)
	/// Proof: Tellor FeedsWithFunding (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	fn fund_feed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `615`
		//  Estimated: `13_328`
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(42_000_000, 13_328)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Tellor DataFeeds (r:1 w:1)
	/// Proof: Tellor DataFeeds (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor UserTipsTotal (r:1 w:1)
	/// Proof: Tellor UserTipsTotal (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Tellor FeedsWithFunding (r:0 w:1)
	/// Proof: Tellor FeedsWithFunding (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: Tellor QueryData (r:0 w:1)
	/// Proof: Tellor QueryData (max_values: None, max_size: Some(1058), added: 3533, mode: MaxEncodedLen)
	/// Storage: Tellor QueryIdFromDataFeedId (r:0 w:1)
	/// Proof: Tellor QueryIdFromDataFeedId (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// The range of component `q` is `[1, 1024]`.
	fn setup_data_feed(q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `569`
		//  Estimated: `13_328`
		// Minimum execution time: 60_000_000 picoseconds.
		Weight::from_parts(60_498_371, 13_328)
			// Standard Error: 598
			.saturating_add(Weight::from_parts(1_955, 0).saturating_mul(q.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Tellor TipCount (r:1 w:1)
	/// Proof: Tellor TipCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampCount (r:1 w:0)
	/// Proof: Tellor ReportedTimestampCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:5000 w:0)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:5000 w:0)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor UserTipsTotal (r:1 w:1)
	/// Proof: Tellor UserTipsTotal (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Tellor QueryIdsWithFunding (r:0 w:1)
	/// Proof: Tellor QueryIdsWithFunding (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: Tellor Tips (r:0 w:1)
	/// Proof: Tellor Tips (max_values: None, max_size: Some(92), added: 2567, mode: MaxEncodedLen)
	/// Storage: Tellor QueryData (r:0 w:1)
	/// Proof: Tellor QueryData (max_values: None, max_size: Some(1058), added: 3533, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 5000]`.
	/// The range of component `q` is `[1, 1024]`.
	fn tip(s: u32, _q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `680 + s * (31 ±0)`
		//  Estimated: `20_200 + s * (5324 ±0)`
		// Minimum execution time: 80_000_000 picoseconds.
		Weight::from_parts(80_000_000, 20_200)
			// Standard Error: 167_384
			.saturating_add(Weight::from_parts(7_458_182, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 5324).saturating_mul(s.into()))
	}
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:0)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:0)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:0 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn add_staking_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `149`
		//  Estimated: `13_701`
		// Minimum execution time: 51_000_000 picoseconds.
		Weight::from_parts(57_000_000, 13_701)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Tellor ReportedTimestampCount (r:1 w:1)
	/// Proof: Tellor ReportedTimestampCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestamps (r:1 w:1)
	/// Proof: Tellor ReportedTimestamps (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// Storage: Tellor StakerReportsSubmittedByQueryId (r:1 w:1)
	/// Proof: Tellor StakerReportsSubmittedByQueryId (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:0 w:1)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastNewValue (r:0 w:1)
	/// Proof: Tellor TimeOfLastNewValue (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:0 w:1)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// The range of component `q` is `[1, 1024]`.
	/// The range of component `v` is `[1, 256]`.
	fn submit_value(_q: u32, _v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `419`
		//  Estimated: `17_268`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(45_503_375, 17_268)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampCount (r:2 w:0)
	/// Proof: Tellor ReportedTimestampCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:2 w:0)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestamps (r:2 w:0)
	/// Proof: Tellor ReportedTimestamps (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:2 w:0)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:1)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeFee (r:1 w:1)
	/// Proof: Tellor DisputeFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn update_stake_amount() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `976`
		//  Estimated: `29_285`
		// Minimum execution time: 66_000_000 picoseconds.
		Weight::from_parts(68_000_000, 29_285)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Tellor ReportedTimestamps (r:1 w:1)
	/// Proof: Tellor ReportedTimestamps (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Tellor VoteRounds (r:1 w:1)
	/// Proof: Tellor VoteRounds (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeFee (r:1 w:0)
	/// Proof: Tellor DisputeFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor OpenDisputesOnId (r:1 w:1)
	/// Proof: Tellor OpenDisputesOnId (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:1 w:1)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:1 w:0)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: Tellor VoteCount (r:1 w:1)
	/// Proof: Tellor VoteCount (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor StakerDetails (r:1 w:0)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	/// Proof Skipped: ParachainSystem HostConfiguration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	/// Proof Skipped: ParachainSystem PendingUpwardMessages (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Tellor VoteInfo (r:0 w:1)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: Tellor PendingVotes (r:0 w:1)
	/// Proof: Tellor PendingVotes (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeIdsByReporter (r:0 w:1)
	/// Proof: Tellor DisputeIdsByReporter (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeInfo (r:0 w:1)
	/// Proof: Tellor DisputeInfo (max_values: None, max_size: Some(394), added: 2869, mode: MaxEncodedLen)
	fn begin_dispute() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `945`
		//  Estimated: `40_060`
		// Minimum execution time: 116_000_000 picoseconds.
		Weight::from_parts(125_000_000, 40_060)
			.saturating_add(T::DbWeight::get().reads(15_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
	}
	/// Storage: Tellor DisputeInfo (r:1 w:0)
	/// Proof: Tellor DisputeInfo (max_values: None, max_size: Some(394), added: 2869, mode: MaxEncodedLen)
	/// Storage: Tellor VoteRounds (r:1 w:0)
	/// Proof: Tellor VoteRounds (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:1 w:1)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: Tellor Votes (r:1 w:1)
	/// Proof: Tellor Votes (max_values: None, max_size: Some(90), added: 2565, mode: MaxEncodedLen)
	/// Storage: Tellor StakerDetails (r:1 w:0)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Tellor UserTipsTotal (r:1 w:0)
	/// Proof: Tellor UserTipsTotal (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Tellor VoteTallyByAddress (r:1 w:1)
	/// Proof: Tellor VoteTallyByAddress (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `991`
		//  Estimated: `25_311`
		// Minimum execution time: 39_000_000 picoseconds.
		Weight::from_parts(47_000_000, 25_311)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Tellor DisputeInfo (r:10 w:0)
	/// Proof: Tellor DisputeInfo (max_values: None, max_size: Some(394), added: 2869, mode: MaxEncodedLen)
	/// Storage: Tellor VoteRounds (r:10 w:0)
	/// Proof: Tellor VoteRounds (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:10 w:10)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: Tellor Votes (r:10 w:10)
	/// Proof: Tellor Votes (max_values: None, max_size: Some(90), added: 2565, mode: MaxEncodedLen)
	/// Storage: Tellor StakerDetails (r:1 w:0)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Tellor UserTipsTotal (r:1 w:0)
	/// Proof: Tellor UserTipsTotal (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Tellor VoteTallyByAddress (r:1 w:1)
	/// Proof: Tellor VoteTallyByAddress (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 10]`.
	fn vote_on_multiple_disputes(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `668 + s * (359 ±0)`
		//  Estimated: `14_652 + s * (10659 ±0)`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(14_680_327, 14_652)
			// Standard Error: 521_611
			.saturating_add(Weight::from_parts(26_278_688, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 10659).saturating_mul(s.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor PendingVotes (r:256 w:245)
	/// Proof: Tellor PendingVotes (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:245 w:245)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	/// Proof Skipped: ParachainSystem HostConfiguration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	/// Proof Skipped: ParachainSystem PendingUpwardMessages (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `s` is `[1, 255]`.
	fn send_votes(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + s * (701 ±0)`
		//  Estimated: `327_617 + s * (5007 ±0)`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(16_000_000, 327_617)
			// Standard Error: 219_079
			.saturating_add(Weight::from_parts(30_407_191, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 5007).saturating_mul(s.into()))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor VoteCount (r:1 w:0)
	/// Proof: Tellor VoteCount (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:1)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:1)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakers (r:1 w:1)
	/// Proof: Tellor TotalStakers (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn report_stake_deposited() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `410`
		//  Estimated: `20_748`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(39_000_000, 20_748)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor VoteCount (r:1 w:0)
	/// Proof: Tellor VoteCount (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:1)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:1)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakers (r:1 w:1)
	/// Proof: Tellor TotalStakers (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor ToWithdraw (r:1 w:1)
	/// Proof: Tellor ToWithdraw (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	/// Proof Skipped: ParachainSystem HostConfiguration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	/// Proof Skipped: ParachainSystem PendingUpwardMessages (max_values: Some(1), max_size: None, mode: Measured)
	fn report_staking_withdraw_request() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `416`
		//  Estimated: `26_067`
		// Minimum execution time: 61_000_000 picoseconds.
		Weight::from_parts(68_000_000, 26_067)
			.saturating_add(T::DbWeight::get().reads(14_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor ToWithdraw (r:1 w:1)
	/// Proof: Tellor ToWithdraw (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn report_stake_withdrawn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `468`
		//  Estimated: `6_656`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(21_000_000, 6_656)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:1)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor VoteCount (r:1 w:0)
	/// Proof: Tellor VoteCount (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor VoteTallyByAddress (r:1 w:0)
	/// Proof: Tellor VoteTallyByAddress (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:1)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakers (r:1 w:1)
	/// Proof: Tellor TotalStakers (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor ToWithdraw (r:1 w:1)
	/// Proof: Tellor ToWithdraw (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn report_slash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `835`
		//  Estimated: `25_782`
		// Minimum execution time: 49_000_000 picoseconds.
		Weight::from_parts(49_000_000, 25_782)
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Tellor VoteRounds (r:1 w:0)
	/// Proof: Tellor VoteRounds (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:1 w:1)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeInfo (r:1 w:0)
	/// Proof: Tellor DisputeInfo (max_values: None, max_size: Some(394), added: 2869, mode: MaxEncodedLen)
	fn report_vote_tallied() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1_011`
		//  Estimated: `12_557`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(26_000_000, 12_557)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Tellor DisputeInfo (r:1 w:0)
	/// Proof: Tellor DisputeInfo (max_values: None, max_size: Some(394), added: 2869, mode: MaxEncodedLen)
	/// Storage: Tellor VoteRounds (r:1 w:0)
	/// Proof: Tellor VoteRounds (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:100 w:1)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor OpenDisputesOnId (r:1 w:1)
	/// Proof: Tellor OpenDisputesOnId (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: System Account (r:101 w:101)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 255]`.
	fn report_vote_executed(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1_136 + r * (154 ±0)`
		//  Estimated: `107_961 + r * (2074 ±305)`
		// Minimum execution time: 56_000_000 picoseconds.
		Weight::from_parts(375_615_485, 107_961)
			// Standard Error: 2_232_717
			.saturating_add(Weight::from_parts(7_801_181, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(39_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(20_u64))
			.saturating_add(Weight::from_parts(0, 2074).saturating_mul(r.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor LastStakeAmountUpdate (r:1 w:1)
	/// Proof: Tellor LastStakeAmountUpdate (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampCount (r:2 w:0)
	/// Proof: Tellor ReportedTimestampCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:2 w:0)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestamps (r:2 w:0)
	/// Proof: Tellor ReportedTimestamps (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:2 w:0)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:1)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeFee (r:1 w:1)
	/// Proof: Tellor DisputeFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor PendingVotes (r:4 w:0)
	/// Proof: Tellor PendingVotes (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1_478`
		//  Estimated: `41_832`
		// Minimum execution time: 90_000_000 picoseconds.
		Weight::from_parts(93_000_000, 41_832)
			.saturating_add(T::DbWeight::get().reads(16_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	/// Proof Skipped: ParachainSystem HostConfiguration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	/// Proof Skipped: ParachainSystem PendingUpwardMessages (max_values: Some(1), max_size: None, mode: Measured)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `38`
		//  Estimated: `4_535`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(46_000_000, 4_535)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Tellor TipCount (r:1 w:0)
	/// Proof: Tellor TipCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestamps (r:100 w:0)
	/// Proof: Tellor ReportedTimestamps (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// Storage: Tellor Tips (r:101 w:100)
	/// Proof: Tellor Tips (max_values: None, max_size: Some(92), added: 2567, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampCount (r:1 w:0)
	/// Proof: Tellor ReportedTimestampCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:5000 w:0)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:5000 w:0)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// Storage: System Account (r:3 w:3)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:0)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:0)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor QueryIdsWithFunding (r:0 w:1)
	/// Proof: Tellor QueryIdsWithFunding (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 5000]`.
	/// The range of component `t` is `[1, 100]`.
	fn claim_onetime_tip(s: u32, t: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + s * (42 ±0) + t * (490 ±0)`
		//  Estimated: `39_230 + s * (5291 ±8) + t * (4128 ±437)`
		// Minimum execution time: 124_000_000 picoseconds.
		Weight::from_parts(124_000_000, 39_230)
			// Standard Error: 502_906
			.saturating_add(Weight::from_parts(10_281_358, 0).saturating_mul(s.into()))
			// Standard Error: 25_144_914
			.saturating_add(Weight::from_parts(57_487_707, 0).saturating_mul(t.into()))
			.saturating_add(RocksDbWeight::get().reads(15_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(t.into())))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(t.into())))
			.saturating_add(Weight::from_parts(0, 5291).saturating_mul(s.into()))
			.saturating_add(Weight::from_parts(0, 4128).saturating_mul(t.into()))
	}
	/// Storage: Tellor DataFeeds (r:1 w:1)
	/// Proof: Tellor DataFeeds (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestamps (r:101 w:0)
	/// Proof: Tellor ReportedTimestamps (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// Storage: Tellor DataFeedRewardClaimed (r:100 w:100)
	/// Proof: Tellor DataFeedRewardClaimed (max_values: None, max_size: Some(89), added: 2564, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:101 w:0)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampCount (r:1 w:0)
	/// Proof: Tellor ReportedTimestampCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:116 w:0)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: System Account (r:3 w:3)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:0)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:0)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor FeedsWithFunding (r:0 w:1)
	/// Proof: Tellor FeedsWithFunding (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 5000]`.
	/// The range of component `t` is `[1, 100]`.
	fn claim_tip(s: u32, t: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1_263 + s * (27 ±0)`
		//  Estimated: `36_719 + s * (210 ±11) + t * (1861 ±595)`
		// Minimum execution time: 110_000_000 picoseconds.
		Weight::from_parts(194_144_639, 36_719)
			// Standard Error: 335_630
			.saturating_add(Weight::from_parts(2_454_978, 0).saturating_mul(s.into()))
			// Standard Error: 16_926_494
			.saturating_add(Weight::from_parts(11_303_990, 0).saturating_mul(t.into()))
			.saturating_add(RocksDbWeight::get().reads(14_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(t.into())))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 210).saturating_mul(s.into()))
			.saturating_add(Weight::from_parts(0, 1861).saturating_mul(t.into()))
	}
	/// Storage: Tellor DataFeeds (r:1 w:1)
	/// Proof: Tellor DataFeeds (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor UserTipsTotal (r:1 w:1)
	/// Proof: Tellor UserTipsTotal (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Tellor FeedsWithFunding (r:0 w:1)
	/// Proof: Tellor FeedsWithFunding (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	fn fund_feed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `615`
		//  Estimated: `13_328`
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(42_000_000, 13_328)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Tellor DataFeeds (r:1 w:1)
	/// Proof: Tellor DataFeeds (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor UserTipsTotal (r:1 w:1)
	/// Proof: Tellor UserTipsTotal (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Tellor FeedsWithFunding (r:0 w:1)
	/// Proof: Tellor FeedsWithFunding (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: Tellor QueryData (r:0 w:1)
	/// Proof: Tellor QueryData (max_values: None, max_size: Some(1058), added: 3533, mode: MaxEncodedLen)
	/// Storage: Tellor QueryIdFromDataFeedId (r:0 w:1)
	/// Proof: Tellor QueryIdFromDataFeedId (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// The range of component `q` is `[1, 1024]`.
	fn setup_data_feed(q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `569`
		//  Estimated: `13_328`
		// Minimum execution time: 60_000_000 picoseconds.
		Weight::from_parts(60_498_371, 13_328)
			// Standard Error: 598
			.saturating_add(Weight::from_parts(1_955, 0).saturating_mul(q.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Tellor TipCount (r:1 w:1)
	/// Proof: Tellor TipCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampCount (r:1 w:0)
	/// Proof: Tellor ReportedTimestampCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:5000 w:0)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:5000 w:0)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor UserTipsTotal (r:1 w:1)
	/// Proof: Tellor UserTipsTotal (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Tellor QueryIdsWithFunding (r:0 w:1)
	/// Proof: Tellor QueryIdsWithFunding (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: Tellor Tips (r:0 w:1)
	/// Proof: Tellor Tips (max_values: None, max_size: Some(92), added: 2567, mode: MaxEncodedLen)
	/// Storage: Tellor QueryData (r:0 w:1)
	/// Proof: Tellor QueryData (max_values: None, max_size: Some(1058), added: 3533, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 5000]`.
	/// The range of component `q` is `[1, 1024]`.
	fn tip(s: u32, _q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `680 + s * (31 ±0)`
		//  Estimated: `20_200 + s * (5324 ±0)`
		// Minimum execution time: 80_000_000 picoseconds.
		Weight::from_parts(80_000_000, 20_200)
			// Standard Error: 167_384
			.saturating_add(Weight::from_parts(7_458_182, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 5324).saturating_mul(s.into()))
	}
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:0)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:0)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:0 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn add_staking_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `149`
		//  Estimated: `13_701`
		// Minimum execution time: 51_000_000 picoseconds.
		Weight::from_parts(57_000_000, 13_701)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Tellor ReportedTimestampCount (r:1 w:1)
	/// Proof: Tellor ReportedTimestampCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestamps (r:1 w:1)
	/// Proof: Tellor ReportedTimestamps (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// Storage: Tellor StakerReportsSubmittedByQueryId (r:1 w:1)
	/// Proof: Tellor StakerReportsSubmittedByQueryId (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:0 w:1)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastNewValue (r:0 w:1)
	/// Proof: Tellor TimeOfLastNewValue (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:0 w:1)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// The range of component `q` is `[1, 1024]`.
	/// The range of component `v` is `[1, 256]`.
	fn submit_value(_q: u32, _v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `419`
		//  Estimated: `17_268`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(45_503_375, 17_268)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampCount (r:2 w:0)
	/// Proof: Tellor ReportedTimestampCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:2 w:0)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestamps (r:2 w:0)
	/// Proof: Tellor ReportedTimestamps (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:2 w:0)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:1)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeFee (r:1 w:1)
	/// Proof: Tellor DisputeFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn update_stake_amount() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `976`
		//  Estimated: `29_285`
		// Minimum execution time: 66_000_000 picoseconds.
		Weight::from_parts(68_000_000, 29_285)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Tellor ReportedTimestamps (r:1 w:1)
	/// Proof: Tellor ReportedTimestamps (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Tellor VoteRounds (r:1 w:1)
	/// Proof: Tellor VoteRounds (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeFee (r:1 w:0)
	/// Proof: Tellor DisputeFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor OpenDisputesOnId (r:1 w:1)
	/// Proof: Tellor OpenDisputesOnId (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:1 w:1)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:1 w:0)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: Tellor VoteCount (r:1 w:1)
	/// Proof: Tellor VoteCount (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor StakerDetails (r:1 w:0)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	/// Proof Skipped: ParachainSystem HostConfiguration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	/// Proof Skipped: ParachainSystem PendingUpwardMessages (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Tellor VoteInfo (r:0 w:1)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: Tellor PendingVotes (r:0 w:1)
	/// Proof: Tellor PendingVotes (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeIdsByReporter (r:0 w:1)
	/// Proof: Tellor DisputeIdsByReporter (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeInfo (r:0 w:1)
	/// Proof: Tellor DisputeInfo (max_values: None, max_size: Some(394), added: 2869, mode: MaxEncodedLen)
	fn begin_dispute() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `945`
		//  Estimated: `40_060`
		// Minimum execution time: 116_000_000 picoseconds.
		Weight::from_parts(125_000_000, 40_060)
			.saturating_add(RocksDbWeight::get().reads(15_u64))
			.saturating_add(RocksDbWeight::get().writes(12_u64))
	}
	/// Storage: Tellor DisputeInfo (r:1 w:0)
	/// Proof: Tellor DisputeInfo (max_values: None, max_size: Some(394), added: 2869, mode: MaxEncodedLen)
	/// Storage: Tellor VoteRounds (r:1 w:0)
	/// Proof: Tellor VoteRounds (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:1 w:1)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: Tellor Votes (r:1 w:1)
	/// Proof: Tellor Votes (max_values: None, max_size: Some(90), added: 2565, mode: MaxEncodedLen)
	/// Storage: Tellor StakerDetails (r:1 w:0)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Tellor UserTipsTotal (r:1 w:0)
	/// Proof: Tellor UserTipsTotal (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Tellor VoteTallyByAddress (r:1 w:1)
	/// Proof: Tellor VoteTallyByAddress (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `991`
		//  Estimated: `25_311`
		// Minimum execution time: 39_000_000 picoseconds.
		Weight::from_parts(47_000_000, 25_311)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Tellor DisputeInfo (r:10 w:0)
	/// Proof: Tellor DisputeInfo (max_values: None, max_size: Some(394), added: 2869, mode: MaxEncodedLen)
	/// Storage: Tellor VoteRounds (r:10 w:0)
	/// Proof: Tellor VoteRounds (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:10 w:10)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: Tellor Votes (r:10 w:10)
	/// Proof: Tellor Votes (max_values: None, max_size: Some(90), added: 2565, mode: MaxEncodedLen)
	/// Storage: Tellor StakerDetails (r:1 w:0)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Tellor UserTipsTotal (r:1 w:0)
	/// Proof: Tellor UserTipsTotal (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Tellor VoteTallyByAddress (r:1 w:1)
	/// Proof: Tellor VoteTallyByAddress (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 10]`.
	fn vote_on_multiple_disputes(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `668 + s * (359 ±0)`
		//  Estimated: `14_652 + s * (10659 ±0)`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(14_680_327, 14_652)
			// Standard Error: 521_611
			.saturating_add(Weight::from_parts(26_278_688, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 10659).saturating_mul(s.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor PendingVotes (r:256 w:245)
	/// Proof: Tellor PendingVotes (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:245 w:245)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	/// Proof Skipped: ParachainSystem HostConfiguration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	/// Proof Skipped: ParachainSystem PendingUpwardMessages (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `s` is `[1, 255]`.
	fn send_votes(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + s * (701 ±0)`
		//  Estimated: `327_617 + s * (5007 ±0)`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(16_000_000, 327_617)
			// Standard Error: 219_079
			.saturating_add(Weight::from_parts(30_407_191, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 5007).saturating_mul(s.into()))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor VoteCount (r:1 w:0)
	/// Proof: Tellor VoteCount (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:1)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:1)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakers (r:1 w:1)
	/// Proof: Tellor TotalStakers (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn report_stake_deposited() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `410`
		//  Estimated: `20_748`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(39_000_000, 20_748)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:0)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor VoteCount (r:1 w:0)
	/// Proof: Tellor VoteCount (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:1)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:1)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakers (r:1 w:1)
	/// Proof: Tellor TotalStakers (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor ToWithdraw (r:1 w:1)
	/// Proof: Tellor ToWithdraw (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	/// Proof Skipped: ParachainSystem HostConfiguration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	/// Proof Skipped: ParachainSystem PendingUpwardMessages (max_values: Some(1), max_size: None, mode: Measured)
	fn report_staking_withdraw_request() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `416`
		//  Estimated: `26_067`
		// Minimum execution time: 61_000_000 picoseconds.
		Weight::from_parts(68_000_000, 26_067)
			.saturating_add(RocksDbWeight::get().reads(14_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor ToWithdraw (r:1 w:1)
	/// Proof: Tellor ToWithdraw (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn report_stake_withdrawn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `468`
		//  Estimated: `6_656`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(21_000_000, 6_656)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Tellor StakerDetails (r:1 w:1)
	/// Proof: Tellor StakerDetails (max_values: None, max_size: Some(181), added: 2656, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TimeOfLastAllocation (r:1 w:1)
	/// Proof: Tellor TimeOfLastAllocation (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakeAmount (r:1 w:1)
	/// Proof: Tellor TotalStakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor RewardRate (r:1 w:1)
	/// Proof: Tellor RewardRate (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor AccumulatedRewardPerShare (r:1 w:0)
	/// Proof: Tellor AccumulatedRewardPerShare (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor VoteCount (r:1 w:0)
	/// Proof: Tellor VoteCount (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor VoteTallyByAddress (r:1 w:0)
	/// Proof: Tellor VoteTallyByAddress (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Tellor TotalRewardDebt (r:1 w:1)
	/// Proof: Tellor TotalRewardDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor TotalStakers (r:1 w:1)
	/// Proof: Tellor TotalStakers (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:0)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tellor ToWithdraw (r:1 w:1)
	/// Proof: Tellor ToWithdraw (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn report_slash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `835`
		//  Estimated: `25_782`
		// Minimum execution time: 49_000_000 picoseconds.
		Weight::from_parts(49_000_000, 25_782)
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Tellor VoteRounds (r:1 w:0)
	/// Proof: Tellor VoteRounds (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:1 w:1)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeInfo (r:1 w:0)
	/// Proof: Tellor DisputeInfo (max_values: None, max_size: Some(394), added: 2869, mode: MaxEncodedLen)
	fn report_vote_tallied() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1_011`
		//  Estimated: `12_557`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(26_000_000, 12_557)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Tellor DisputeInfo (r:1 w:0)
	/// Proof: Tellor DisputeInfo (max_values: None, max_size: Some(394), added: 2869, mode: MaxEncodedLen)
	/// Storage: Tellor VoteRounds (r:1 w:0)
	/// Proof: Tellor VoteRounds (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Tellor VoteInfo (r:100 w:1)
	/// Proof: Tellor VoteInfo (max_values: None, max_size: Some(242), added: 2717, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor OpenDisputesOnId (r:1 w:1)
	/// Proof: Tellor OpenDisputesOnId (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: System Account (r:101 w:101)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 255]`.
	fn report_vote_executed(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1_136 + r * (154 ±0)`
		//  Estimated: `107_961 + r * (2074 ±305)`
		// Minimum execution time: 56_000_000 picoseconds.
		Weight::from_parts(375_615_485, 107_961)
			// Standard Error: 2_232_717
			.saturating_add(Weight::from_parts(7_801_181, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(39_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(20_u64))
			.saturating_add(Weight::from_parts(0, 2074).saturating_mul(r.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor LastStakeAmountUpdate (r:1 w:1)
	/// Proof: Tellor LastStakeAmountUpdate (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampCount (r:2 w:0)
	/// Proof: Tellor ReportedTimestampCount (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestampsByIndex (r:2 w:0)
	/// Proof: Tellor ReportedTimestampsByIndex (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedTimestamps (r:2 w:0)
	/// Proof: Tellor ReportedTimestamps (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// Storage: Tellor ReportedValuesByTimestamp (r:2 w:0)
	/// Proof: Tellor ReportedValuesByTimestamp (max_values: None, max_size: Some(314), added: 2789, mode: MaxEncodedLen)
	/// Storage: Tellor StakeAmount (r:1 w:1)
	/// Proof: Tellor StakeAmount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Tellor DisputeFee (r:1 w:1)
	/// Proof: Tellor DisputeFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tellor PendingVotes (r:4 w:0)
	/// Proof: Tellor PendingVotes (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1_478`
		//  Estimated: `41_832`
		// Minimum execution time: 90_000_000 picoseconds.
		Weight::from_parts(93_000_000, 41_832)
			.saturating_add(RocksDbWeight::get().reads(16_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}
